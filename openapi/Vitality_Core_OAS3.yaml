openapi: 3.0.0
info:
  title: Vitality Core
  description: |

    This API provides access to core Vitality functionality
    ## Resources
     
    <table class="table table-striped table-bordered table-hover table-condensed">
     <thead>
      <tr>
        <th style="background-color: red;color:white">Resource</th>
        <th style="background-color: red;color:white">Description</th>
      </tr>
    </thead> <tbody> <tr> <td>Assessments</td> <td> <ul> <li>Submission of assessments <ul> <li>online: general/mentalwellbeing/nutrition/fitness'</li> <li>offline: screenings</li> </ul> </li> <li>Retrieval of assessment feedback</li> <li>Retrieval of assessment metadata, e.g effective period, type</li> </ul> </td> </tr> <tr> <td>Challenges</td> <td> <ul> <li>Management of challenges (Group and Community)</li> <li>Retrieval of challenge history</li> <li>Retireval of weekly challenges</li> <li>Assessment-triggered challenges</li> <li>Workout tracker</li> </ul> </td> </tr> <tr> <td>Devices</td> <td> <ul> <li>Retrieval of device activities</li> <li>Linking and delinking of devices for a member</li> </ul> </td> </tr> <tr> <td>Fitness Events</td> <td><ul><li>Participation on fitness events</li></ul></td> </tr> <tr> <td>Friends</td> <td> <ul> <li>Friend search</li> <li>Management of friend invitations (accept, reject, send)</li> <li>Management of friend groups</li> </ul> </td> </tr> <tr> <td>Memberships</td> <td> <ul> <li>Retrieval of membership details including demographics and financial details</li> <li>Retrieval of system-defined membership status thresholds</li> <li>Retireval of supported device list for a market</li> </ul> </td> </tr> <tr> <td>Notifications</td> <td><ul><li>Retrieval of member notifications</li></ul></td> </tr> <tr> <td>Partners</td> <td><ul><li>Retrieval of details on reward partners</li></ul></td> </tr> <tr> <td>Points</td> <td><ul><li>Retrieval of point information for a member including history and summary</li></ul></td> </tr> <tr> <td>Rewards</td> <td><ul><li>Reward Redemption</li></ul></td> </tr> </tbody> </table>
      
    ## Membership Identification
      * Operations which return member-specific data require the Vitality membership number to be specified in the "membership-no" input paramter 
      
      * Certain operations also support Vitliaty Active (VA) members and for those cases the VA membership number is epxected to be specified in the member-id input parameter

    ## More Information on Vitality 
    Please refer to this [link](https://www.aia.com/en/about-aia/aia-vitality.html) for more details about Vitality 
  contact: {}
  version: v6.91
servers:
  - url: 'https://vitality.aia.com/vitality/core/v1'
    variables: {}
paths:
  /assessments/configuration:
    get:
      tags:
        - Assessments
      summary: assessmentConfiguration
      description: Provides a list of all available assessments for members within a business entity
      operationId: AssessmentConfiguration
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/details:
    get:
      tags:
        - Assessments
      summary: memberAssessments
      description: Provides all member assessments - online (general/mentalwellbeing/nutrition/fitness) and offline assessments (screenings) based on membership number
      operationId: MemberAssessments
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberAssessmentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/feedback:
    get:
      tags:
        - Assessments
      summary: generalAssessmentGet
      description: 'Provides feedback for member assessments, based on membership number'
      operationId: GeneralAssessmentGet
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: assessment-type
          in: query
          description: Vitality assessment type for specific selection
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AssessmentType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentFeedbackResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/fitness:
    post:
      tags:
        - Assessments
      summary: fitnessAssessmentPost
      description: 'Enables online fitness assessment submission by member, based on membership number'
      operationId: FitnessAssessmentPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: role
          in: query
          description: Vitality role of the member
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: VHR general assessment object data.
        content:
          application/json:
            schema:
              description: VHR general assessment object data.
              $ref: '#/components/schemas/FitnessAssessmentRequest'
            examples:
              FitnessAssessmentRequest:
                desciption: Sample example for FitnessAssessmentRequest
                $ref: '#/components/examples/FitnessAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentFeedbackResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/general:
    post:
      tags:
        - Assessments
      summary: generalAssessmentPost
      description: 'Enables online Vitality health review / general assessment submission by member, based on membership number'
      operationId: GeneralAssessmentPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: role
          in: query
          description: Vitality role of the member
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: VHR general assessment object data.
        content:
          application/json:
            schema:
              description: VHR general assessment object data.
              $ref: '#/components/schemas/VHRGeneralAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentFeedbackResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/mental:
    post:
      tags:
        - Assessments
      summary: mentalAssessmentPost
      description: 'Enables online mental assessment submission by member, based on membership number'
      operationId: MentalAssessmentPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: role
          in: query
          description: Vitality role of the member
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: VHR general assessment object data.
        content:
          application/json:
            schema:
              description: VHR general assessment object data.
              $ref: '#/components/schemas/MentalAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentFeedbackResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/nutrition:
    post:
      tags:
        - Assessments
      summary: nutritionAssessmentPost
      description: 'Enables online nutrition assessment submission by member, based on membership number'
      operationId: NutritionAssessmentPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: role
          in: query
          description: Vitality role of the member
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: VHR general assessment object data.
        content:
          application/json:
            schema:
              description: VHR general assessment object data.
              $ref: '#/components/schemas/NutritionAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/AssessmentFeedbackResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/screenings:
    post:
      tags:
        - Assessments
      summary: screenings
      description: Enables members to upload their screening assessment details for processing
      operationId: Screenings
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Screening assessment object data.
        content:
          application/json:
            schema:
              description: Screening assessment object data.
              $ref: '#/components/schemas/ScreeningAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /assessments/declaration:
    post:
      tags:
        - Assessments
      summary: declaration
      description: Enables members to send declaration for processing
      operationId: Declaration
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Declaration object data.
        content:
          application/json:
            schema:
              description: Declaration object data.
              $ref: '#/components/schemas/DeclarationRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/community:
    get:
      tags:
        - Challenges
      summary: communityChallengesOpen
      description: Provides a list of all commnunity challenge available for a business entity
      operationId: CommunityChallengesOpen
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/CommunityChallengesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Challenges
      summary: communityChallengesAcceptPost
      description: 'Enables a member to challenge a friend within community, based on friend id'
      operationId: CommunityChallengesAcceptPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: challenge-id
          in: query
          description: Challenge id for a member challenge.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: action
          in: query
          description: Action for the community challenge.
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Action'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/community/progress:
    post:
      tags:
        - Challenges
      summary: communityChallengesProgress
      description: Provides a list of all commnunity challenge available for a business entity
      operationId: CommunityChallengesProgress
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: challenge-id
          in: query
          description: Challenge id for a member challenge.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: action
          in: query
          description: Action for the community challenge.
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Action315'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/community/member:
    get:
      tags:
        - Challenges
      summary: communityChallenges
      description: Provides community challenge details for a member i.e. challenges sent to the member by any of the friends (not part of weekly or group)
      operationId: CommunityChallenges
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/CommunityChallengesMemberResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/community/invite:
    get:
      tags:
        - Challenges
      summary: communityChallengesInvite
      description: Provides a list of all invitations for a member based on membership number
      operationId: CommunityChallengesInvite
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/CommunityChallengesInviteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Challenges
      summary: communityChallengesInvitePost
      description: 'Enables a member to challenge a friend within community, based on friend id'
      operationId: CommunityChallengesInvitePost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: Request data for community challenge invite.
        content:
          application/json:
            schema:
              description: Request data for community challenge invite.
              $ref: '#/components/schemas/CommunityChallengesInviteRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/challenges/community/invite/{invite-id}':
    post:
      tags:
        - Challenges
      summary: communityChallengesAccept
      description: 'Enables a member to challenge a friend within community, based on friend id'
      operationId: CommunityChallengesAccept
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: invite-id
          in: path
          description: Key to identify an invitation.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: challenge-id
          in: query
          description: Challenge id for a member challenge.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
        - Challenges
      summary: communityChallengesDecline
      description: 'Enables a member to challenge a friend within community, based on friend id'
      operationId: CommunityChallengesDecline
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: invite-id
          in: path
          description: Key to identify an invitation.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: challenge-id
          in: query
          description: Challenge id for a member challenge.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/group:
    get:
      tags:
        - Challenges
      summary: memberGroupChallenges
      description: 'Provides group challenges, based on either member id or membership number'
      operationId: MemberGroupChallenges
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: Member id for non membership accounts
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/history:
    get:
      tags:
        - Challenges
      summary: ChallengesHistory
      description: 'Provides history for all member challenges, namely - risk, weekly, group and community,for given year(s) in past, based on either membership id or membership number'
      operationId: ChallengesHistory
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: number-of-years
          in: query
          description: Number of years in the past user wants to see the challenges detail
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/risk:
    get:
      tags:
        - Challenges
      summary: memberChallenges
      description: 'Provides challenges triggered through assessments, based on membership number'
      operationId: MemberChallenges
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Challenges
      summary: riskChallengesAcceptPost
      description: 'Enables a member to accept or quit a challenge, based on membership number'
      operationId: RiskChallengesAcceptPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: challenge-id
          in: query
          description: Challenge id for a member risk challenge.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: action
          in: query
          description: Action for the risk challenge.
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Action'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/weekly:
    get:
      tags:
        - Challenges
      summary: memberWeeklyChallenges
      description: 'Provides weekly challenges, based on either member id or membership number'
      operationId: MemberWeeklyChallenges
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: Member id for non membership accounts
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /challenges/workout-tracker:
    get:
      tags:
        - Challenges
      summary: workoutTracker
      description: 'Provides a list of workouts of the member, based on memebership number'
      operationId: WorkoutTracker
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: device-name
          in: query
          description: Device name used by the user to record activity details.
          style: form
          explode: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Enable user to look up starting from this date.
          style: form
          explode: true
          schema:
            type: string
        - name: endDate
          in: query
          description: Enable user to look up ending by this date.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/WorkoutTrackerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /devices:
    get:
      tags:
        - Devices
      summary: devicesList
      description: Provides list of physical activity tracking devices available for members in a business entity
      operationId: DevicesList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/DevicesListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/devices/{device-name}/activities':
    get:
      tags:
        - Devices
      summary: deviceDetails
      description: Provides activity details for all devices based on a membership number
      operationId: DeviceDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: month
          in: query
          description: 'Month in which user has performed the activity. Valid values: 1 - 12'
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: device-name
          in: path
          description: Device name used by the user to record activity details.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/DeviceDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/devices/{device-name}/link':
    post:
      tags:
        - Devices
      summary: deviceLink
      description: Enables a member to link a device to their membership for tracking physical activities
      operationId: DeviceLink
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: device-name
          in: path
          description: Device to be linked.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: Registered email of account linking.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/DeviceLinkResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
        - Devices
      summary: deviceDelink
      description: Enables a member to delink a device from their membership account
      operationId: DeviceDelink
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: device-name
          in: path
          description: Device to be delinked.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: Registered email of account delinking.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/DeviceDelinkResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/devices/{device-name}/link/token':
    post:
      tags:
        - Devices
      summary: deviceLinkToken
      description: Enables a member to link a device to their membership for tracking physical activities
      operationId: DeviceLinkToken
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: device-name
          in: path
          description: Device to be linked.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: Garmin tokens and userId of a specific member.
        content:
          application/json:
            schema:
              description: Garmin tokens and userId of a specific member.
              $ref: '#/components/schemas/LinkGarminTokenRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /fitness-events:
    post:
      tags:
        - Fitness Events
      summary: fitnessEventDetails
      description: Enables members to send their participation information on fitness events to Vitality system
      operationId: FitnessEventDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: Activities object to post the the data.
        content:
          application/json:
            schema:
              description: Activities object to post the the data.
              $ref: '#/components/schemas/ActivitiesRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /friends:
    get:
      tags:
        - Friends
      summary: friendsList
      description: Provides list of all friends for a member based on membership number
      operationId: FriendsList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: page-limit
          in: query
          description: 'This parameter indicates the maximum number of items to return. If this parameter is not specified, all records are returned starting from the position specified by the offset parameter'
          style: form
          explode: true
          schema:
            type: string
        - name: page-offset
          in: query
          description: 'This parameter indicates the starting position of the query in relation to the complete set of unpaginated items. Offset = 0 means starting from first record in the set. If this parameter is not specified, the default value is 0'
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/FriendsListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /friends/group:
    get:
      tags:
        - Friends
      summary: groupsList
      description: 'Provides a group owned by member, based on either  membership number or member id'
      operationId: GroupsList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/GroupListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
        - Friends
      summary: editGroup
      description: Enables a member to edit a group name and add or remove friend(s) from group
      operationId: EditGroup
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: group-name
          in: query
          description: Group name for friends.
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: List of friends to be added or deleted.
        content:
          application/json:
            schema:
              description: List of friends to be added or deleted.
              $ref: '#/components/schemas/GroupEditRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Friends
      summary: createGroup
      description: Enables a member to create a group
      operationId: CreateGroup
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: group-name
          in: query
          description: Group name for  friends.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
        - Friends
      summary: deleteGroup
      description: Enables member to delete their group.
      operationId: DeleteGroup
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: group-id
          in: query
          description: Group id of the friends
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /friends/group/pending-list:
    get:
      tags:
        - Friends
      summary: pendingGroupGet
      description: Provides a list of members pending group requests sent by friends
      operationId: PendingGroupGet
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PendingGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /friends/pending-list:
    get:
      tags:
        - Friends
      summary: pendingFriendsGet
      description: Provides a list of members pending friend requests send to friends and sent by friends
      operationId: PendingFriendsGet
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
        - name: page-limit
          in: query
          description: 'This parameter indicates the maximum number of items to return. If this parameter is not specified, all records are returned starting from the position specified by the offset parameter'
          style: form
          explode: true
          schema:
            type: string
        - name: page-offset
          in: query
          description: 'This parameter indicates the starting position of the query in relation to the complete set of unpaginated items. Offset = 0 means starting from first record in the set. If this parameter is not specified, the default value is 0'
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PendingFriendsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Friends
      summary: pendingFriendsPost
      description: Enables a member to accept or reject a friend request
      operationId: PendingFriendsPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: friend-id
          in: query
          description: User id of the friend member.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: action
          in: query
          description: User id of the friend member.
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Action317'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /friends/search:
    get:
      tags:
        - Friends
      summary: friendFinder
      description: Provides members details based on partial e-mail id or name ; typically used for searching members to befriend
      operationId: FriendFinder
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: search-key
          in: query
          description: Key used to search a friend either by email or name. Wildcard is supported
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: page-limit
          in: query
          description: 'This parameter indicates the maximum number of items to return. If this parameter is not specified, all records are returned starting from the position specified by the offset parameter'
          style: form
          explode: true
          schema:
            type: string
        - name: page-offset
          in: query
          description: 'This parameter indicates the starting position of the query in relation to the complete set of unpaginated items. Offset = 0 means starting from first record in the set. If this parameter is not specified, the default value is 0'
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/FriendFinderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/friends/{friend-id}':
    get:
      tags:
        - Friends
      summary: friendDetails
      description: Provides details of a members friend based on membership number or member id of the member and friends user id
      operationId: FriendDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: friend-id
          in: path
          description: User id of the friend member.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/FriendDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Friends
      summary: addFriend
      description: 'Enables a member to send a friend request to another vitality member within a business entity, based on membership number or member id of the member and friends user id'
      operationId: AddFriend
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: friend-id
          in: path
          description: User id of the friend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
        - Friends
      summary: deleteFriend
      description: 'Enables a member to remove a friend from their friends list, based on membership number or member id of the member and friends user id'
      operationId: DeleteFriend
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: friend-id
          in: path
          description: User id of the friend member.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/friends/{friend-id}/interact':
    post:
      tags:
        - Friends
      summary: friendsInteraction
      description: 'Enables a member to send an interact request namely - poke, clap and like'
      operationId: FriendsInteraction
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: friend-id
          in: path
          description: Friend identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: action
          in: query
          description: Types of action to interact with friend
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Action318'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: member-id
          in: query
          description: member id for vitality active only members.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /memberships/financials/bank-list:
    get:
      tags:
        - Memberships
      summary: memberFinancialsBankList
      description: Provides list of bank available for members in a business entity number.
      operationId: MemberFinancialsBankList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: bank-id
          in: query
          description: Id of bank member is looking up.
          style: form
          explode: true
          schema:
            type: string
        - name: overseas
          in: query
          description: Boolean (Y/N) whether it is a overseas bank.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberBankListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /memberships/status-thresholds:
    get:
      tags:
        - Memberships
      summary: statusThresholds
      description: Provides threshold limits defined for Vitality membership status
      operationId: StatusThresholds
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/VitalityThresholdResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}':
    get:
      tags:
        - Memberships
      summary: membershipDetails
      description: Provides Vitality membership details based membership number
      operationId: MembershipDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MembershipDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}/demographics':
    get:
      tags:
        - Memberships
      summary: memberDemographics
      description: Provides members demographic details based on membership number and document id
      operationId: MemberDemographics
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number  or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: doc-id
          in: query
          description: Unique identifier of the document e.g. passport number etc.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MembersDemographicsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Memberships
      summary: memberDemographicsUpdate
      description: Enable member to update demographic details based on membership number and document id
      operationId: MemberDemographicsUpdate
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number  or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: doc-id
          in: query
          description: Unique identifier of the document e.g. passport number etc.
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: Updated contact details of the user
        content:
          application/json:
            schema:
              description: Updated contact details of the user
              $ref: '#/components/schemas/MemberDemographicsUpdateRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}/devices':
    get:
      tags:
        - Memberships
      summary: memberDevicesList
      description: Provides list of physical activity tracking devices linked for a specific member
      operationId: MemberDevicesList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Membership number of the user  or member id (vitality active cases).
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/DevicesListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}/financials':
    get:
      tags:
        - Memberships
      summary: memberFinancials
      description: Provides list of financial details of the user based on membership number.
      operationId: MemberFinancials
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Membership number of the user  or member id (vitality active cases).
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberFinancialsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Memberships
      summary: memberFinancialsUpdate
      description: Enable member to update financial details based on membership number.
      operationId: MemberFinancialsUpdate
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Membership number of the user  or member id (vitality active cases).
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated financial details of the user
        content:
          application/json:
            schema:
              description: Updated financial details of the user
              $ref: '#/components/schemas/MemberFinancialsUpdateRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}/profile-image':
    get:
      tags:
        - Memberships
      summary: memberProfileImage
      description: Provides profile image of Vitality member based on membership number
      operationId: MemberProfileImage
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberProfileImageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Memberships
      summary: memberProfileImageUpdate
      description: Enable a member to update profile image
      operationId: MemberProfileImageUpdate
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: profile-image
          in: query
          description: Profile JPEG image with base-64 encoding
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/memberships/{membership-no}/opt-out-search':
    get:
      tags:
        - Memberships
      summary: memberOptOutSearch
      description: Provides opt out search option of Vitality member based on membership number
      operationId: MemberOptOutSearch
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberOptOutSeacrhResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Memberships
      summary: memberOptOutSearchUpdate
      description: Enable a member to update opt out search option based on membership number
      operationId: MemberOptOutSearchUpdate
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: path
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: opt-out-search
          in: query
          description: Is opt out search option of the member
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /notifications:
    get:
      tags:
        - Notifications
      summary: notificationMangement
      description: Provides a list of notifications received by the member based on membership number
      operationId: NotificationMangement
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: page-limit
          in: query
          description: 'This parameter indicates the maximum number of items to return. If this parameter is not specified, all records are returned starting from the position specified by the offset parameter'
          style: form
          explode: true
          schema:
            type: string
        - name: page-offset
          in: query
          description: 'This parameter indicates the starting position of the query in relation to the complete set of unpaginated items. Offset = 0 means starting from first record in the set. If this parameter is not specified, the default value is 0'
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/NotificationManagementResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Notifications
      summary: notificationMangementPost
      description: Enables member to receive push notifications from Vitality
      operationId: NotificationMangementPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: Device details of the user
        content:
          application/json:
            schema:
              description: Device details of the user
              $ref: '#/components/schemas/NotificationManagementPostRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /partners:
    get:
      tags:
        - Partners
      summary: partnerList
      description: Provides the listof all rewards and benefits partners available for all membership statuses
      operationId: PartnerList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PartnerListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/partners/{partner-id}':
    get:
      tags:
        - Partners
      summary: partnerDetails
      description: Provides partner and benefit details offered by the partner
      operationId: PartnerDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: partner-id
          in: path
          description: Unique identifier of the partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PartnerDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/partners/{partner-id}/branch-details':
    get:
      tags:
        - Partners
      summary: partnerBranchDetails
      description: Provides partner and benefit details offered by the partner
      operationId: PartnerBranchDetails
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: partner-id
          in: path
          description: Unique identifier of the partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PartnerBranchDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/partners/{partner-id}/eligibility':
    get:
      tags:
        - Partners
      summary: partnerEligibility
      description: Enables member to check eligibility on benefits redemption based on membership number
      operationId: PartnerEligibility
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: partner-id
          in: path
          description: Unique identifier of the partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PartnerEligibilityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/partners/{partner-id}/eligibility/token':
    get:
      tags:
        - Partners
      summary: partnerEligibilityToken
      description: Enables member to retrieve eligibility token for benefits SSO redemption based on membership number
      operationId: PartnerEligibilityToken
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: partner-id
          in: path
          description: Unique identifier of the partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number or member id (vitality active cases)
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PartnerEligibilityTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /points:
    get:
      tags:
        - Points
      summary: pointsList
      description: 'Provides total points earned by member for vitality activities of current year, based on membership number'
      operationId: PointsList
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PointsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /points/configuration:
    get:
      tags:
        - Points
      summary: pointsConfiguration
      description: 'Provides the points setup in relation to a Vitality activity, for a business entity.'
      operationId: PointsConfiguration
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PointsConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /points/history:
    get:
      tags:
        - Points
      summary: pointsHistory
      description: 'Provides points history of a member for given year(s) in past, based on membership number'
      operationId: PointsHistory
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: number-of-years
          in: query
          description: Number of years in the past user wants to see the points detail
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PointsHistoryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /points/history/lookup:
    get:
      tags:
        - Points
      summary: pointsHistoryLookUp
      description: 'Look up points history of a member for given year(s) in past, based on membership number and point history type'
      operationId: PointsHistoryLookUp
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: number-of-years
          in: query
          description: Number of years in the past user wants to see the points detail
          style: form
          explode: true
          schema:
            type: string
        - name: activity-id
          in: query
          description: Unique identifier of the events.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PointsHistoryLookUpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /points/summary:
    get:
      tags:
        - Points
      summary: pointsSummary
      description: 'Provides points summary of member for current year, based on membership number'
      operationId: PointsSummary
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/PointsSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /rewards:
    get:
      tags:
        - Rewards
      summary: memberRewards
      description: Enables members to retrieve details of all rewards allocated to them after completing Vitality activities
      operationId: MemberRewards
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/MemberRewardsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /rewards/configuration:
    get:
      tags:
        - Rewards
      summary: rewardConfiguration
      description: Provides reward configuration for a particular based on membership status
      operationId: RewardConfiguration
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: Vitality status of the member.
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/RewardConfigurationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/rewards/{reward-id}/coupons':
    get:
      tags:
        - Rewards
      summary: rewardsRedemptionGet
      description: Provides list of coupon codes issues to a member
      operationId: RewardsRedemptionGet
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: reward-id
          in: path
          description: Unique identifier of the reward.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: donate-option
          in: query
          description: This attribute specifies whether the reward can be donated or not.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/RewardsRedemptionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
        - Rewards
      summary: rewardsRedemptionPost
      description: Enables a member to obtain a coupon codes after a reward is redeemed
      operationId: RewardsRedemptionPost
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: reward-id
          in: path
          description: Unique identifier of the reward.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Rewards redemption object to post the the data.
        content:
          application/json:
            schema:
              description: Rewards redemption object to post the the data.
              $ref: '#/components/schemas/RewardsCouponRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/rewards/{reward-id}/coupons/{coupon-id}/tag':
    post:
      tags:
        - Rewards
      summary: tagCoupon
      description: Enables members to tag a coupon based reward to used and not used status
      operationId: TagCoupon
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: reward-id
          in: path
          description: Identifier for reward offered by a partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: coupon-id
          in: path
          description: Identifier of a coupon for a reward.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tagged-status
          in: query
          description: Coupon used status.
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TaggedStatus'
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/rewards/{reward-id}/statement':
    get:
      tags:
        - Rewards
      summary: rewardStatement
      description: Provide lsit of benefit statement of a member
      operationId: RewardStatement
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: reward-id
          in: path
          description: Identifier for reward offered by a partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: membership-no
          in: query
          description: Vitality membership number
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: OK
                $ref: '#/components/schemas/RewardsStatementResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/rewards/{reward-id}/redeem':
    post:
      tags:
        - Rewards
      summary: submitRewardsRedemption
      description: Enables members to select a rewards partner for a specific reward based on member id or membership number
      operationId: SubmitRewardsRedemption
      parameters:
        - name: Authorization
          in: header
          description: 'An access token issued by an AIA Authorization server. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ=='
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-AIA-Request-Id
          in: header
          description: A unique id generated for each request for tracking purposes
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: X-Vitality-Legal-Entity-Id
          in: header
          description: Attribute used to identify local market
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: reward-id
          in: path
          description: Unique identifier of the partner.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Rewards redemption object to post the the data.
        content:
          application/json:
            schema:
              description: Rewards redemption object to post the the data.
              $ref: '#/components/schemas/RewardsRedemptionRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: |-
            Internal Server Error
            <table class="table table-striped table-bordered"> <thead> <tr> <th>ReasonCode</th> <th>Reason</th> <th>Message</th> </tr> </thead> <tbody> <tr> <td>502</td> <td>Bad Gateway</td> <td>Service is down or being upgraded</td> </tr> <tr> <td>503</td> <td>Service Unavailable</td> <td>Service is up, but overloaded with requests</td> </tr> <tr> <td>504</td> <td>Gateway Timeout</td> <td>Servers are up, but the request   couldn’t be serviced due to some failure within our stack</td> </tr> </tbody> </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
components:
  examples:
    FitnessAssessmentRequest:
      summary: An example of a FitnessAssessmentRequest
      value:
        medicalNoExerciseDoctor: 'Yes'
        medicalNoExerciseCondition: 'Yes'
        physicalActivityExerciseDaysPerWeek: 0
        physicalActivityExerciseIntensity: Low
  schemas:
    ActivitiesRequest:
      title: ActivitiesRequest
      required:
        - eventId
        - eventName
        - eventType
        - eventDate
        - finishTime
      type: object
      properties:
        eventId:
          type: string
          description: Unique identifier for event.
        eventName:
          type: string
          description: Specifies event name for which user has joined.
        eventType:
          type: string
          description: Types of events user can participate.
        eventDate:
          type: string
          description: Date on which event is planned to happen.
        distance:
          type: string
          description: Range of distance user has to register for the event.
        finishTime:
          type: string
          description: Time at which user has finished the event.
        raceBibNo:
          type: string
          description: Unique identifier no to identify race participant.
    AssessmentConfigResponse:
      title: AssessmentConfigResponse
      type: object
      properties:
        assessmentConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentConfiguration'
          description: ''
    AssessmentFeedbackResponse:
      title: AssessmentFeedbackResponse
      type: object
      properties:
        actualAge:
          type: integer
          description: Actual age of the member
          format: int64
        vitalityAge:
          $ref: '#/components/schemas/VitalityAge'
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
          description: ''
        feedbackIndicator:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackIndicator'
          description: ''
        assessmentData:
          $ref: '#/components/schemas/AssessmentData'
        riskFactor:
          description: Specifies various risk factors for the member.
          $ref: '#/components/schemas/RiskFactor'
    CommunityChallengesInviteRequest:
      title: CommunityChallengesInviteRequest
      required:
        - friendId
        - challengeName
        - challengeStatusFromDate
      type: object
      properties:
        friendId:
          type: string
          description: Friend Id of the friend member to whom member has invited for challenge
        membershipNo:
          type: string
          description: 'Vitality membership number, if available, of the friend.'
        challengeId:
          type: string
          description: Unique identifier of the challenge.
        challengeName:
          type: string
          description: Challenge Name.
        challengeType:
          type: string
          description: 'Different types of challenges available e.g. Run or walk 10 km , run or walk 5 km. , etc.'
        challengeStatusFromDate:
          type: string
          description: 'Challenge status(selected , rejected , quit) from date value.'
    CommunityChallengesInviteResponse:
      title: CommunityChallengesInviteResponse
      type: object
      properties:
        communityChallengeInvite:
          type: array
          items:
            $ref: '#/components/schemas/CommunityChallengeInvite'
          description: ''
    CommunityChallengesResponse:
      title: CommunityChallengesResponse
      type: object
      properties:
        communityChallenges:
          type: array
          items:
            $ref: '#/components/schemas/CommunityChallenge'
          description: ''
    CommunityChallengesMemberResponse:
      title: CommunityChallengesMemberResponse
      type: object
      properties:
        memberChallenges:
          type: array
          items:
            $ref: '#/components/schemas/MemberChallenge'
          description: ''
    DeviceDetailsResponse:
      title: DeviceDetailsResponse
      type: object
      properties:
        deviceDetails:
          type: array
          items:
            $ref: '#/components/schemas/DeviceDetail'
          description: ''
    DeviceLinkResponse:
      title: DeviceLinkResponse
      type: object
      properties:
        deviceName:
          type: string
          description: Device name used for tracking by the user.
        linkURL:
          type: string
          description: Link URL for the device.
    DeviceDelinkResponse:
      title: DeviceDelinkResponse
      type: object
      properties:
        deviceName:
          type: string
          description: Device name used for tracking by the user.
        delinkURL:
          type: string
          description: Delink URL for the device.
    DevicesListResponse:
      title: DevicesListResponse
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
          description: ''
    FitnessAssessmentRequest:
      title: FitnessAssessmentRequest
      type: object
      properties:
        medicalNoExerciseDoctor:
          description: Do not exercise
          $ref: '#/components/schemas/MedicalNoExerciseDoctor'
        medicalNoExerciseCondition:
          description: No medical conditions
          $ref: '#/components/schemas/MedicalNoExerciseCondition'
        physicalActivityExerciseDaysPerWeek:
          description: Activity days per week
          $ref: '#/components/schemas/PhysicalActivityExerciseDaysPerWeek'
        physicalActivityExerciseIntensity:
          description: Exercise intensity
          $ref: '#/components/schemas/PhysicalActivityExerciseIntensity'
        physicalActivityExerciseMinutesPerSession:
          type: string
          description: Exercise session time
        lifestyleSedentaryMinutesTelevision:
          type: string
          description: Television time
        physicalActivityCardioExerciseFrequency:
          description: Cardio frequency
          $ref: '#/components/schemas/PhysicalActivityCardioExerciseFrequency'
        physicalActivityStrengthExerciseFrequency:
          description: Strength exercise frequency
          $ref: '#/components/schemas/PhysicalActivityStrengthExerciseFrequency'
        physicalActivityFlexibilityExerciseFrequency:
          description: Flex exercise frequency
          $ref: '#/components/schemas/PhysicalActivityFlexibilityExerciseFrequency'
        physicalActivityReasonBeingActiveHealth:
          description: Active health goals
          $ref: '#/components/schemas/PhysicalActivityReasonBeingActiveHealth'
        physicalActivityReasonBeingActiveLook:
          description: Active look goals
          $ref: '#/components/schemas/PhysicalActivityReasonBeingActiveLook'
        physicalActivityReasonBeingActiveStress:
          description: Active stress goals
          $ref: '#/components/schemas/PhysicalActivityReasonBeingActiveStress'
        physicalActivityReasonBeingActiveSocial:
          description: Active social goals
          $ref: '#/components/schemas/PhysicalActivityReasonBeingActiveSocial'
        physicalActivityReasonBeingActiveNone:
          description: No active goals
          $ref: '#/components/schemas/PhysicalActivityReasonBeingActiveNone'
        physicalActivityTypeAerobics:
          description: Aerobics
          $ref: '#/components/schemas/PhysicalActivityTypeAerobics'
        physicalActivityTypeJogging:
          description: Jogging
          $ref: '#/components/schemas/PhysicalActivityTypeJogging'
        physicalActivityTypeSwimmingWater:
          description: Swimming
          $ref: '#/components/schemas/PhysicalActivityTypeSwimmingWater'
        physicalActivityTypeWeightTraining:
          description: Weight training
          $ref: '#/components/schemas/PhysicalActivityTypeWeightTraining'
        physicalActivityTypeCycling:
          description: Cycling
          $ref: '#/components/schemas/PhysicalActivityTypeCycling'
        physicalActivityTypeSkating:
          description: Skating
          $ref: '#/components/schemas/PhysicalActivityTypeSkating'
        physicalActivityTypeRunningWalking:
          description: Running
          $ref: '#/components/schemas/PhysicalActivityTypeRunningWalking'
        physicalActivityTypeBallRacquetSports:
          description: Racquet sports
          $ref: '#/components/schemas/PhysicalActivityTypeBallRacquetSports'
        physicalActivityTypeYoga:
          description: Yoga
          $ref: '#/components/schemas/PhysicalActivityTypeYoga'
        physicalActivityTypePilates:
          description: Pilates
          $ref: '#/components/schemas/PhysicalActivityTypePilates'
        physicalActivityTypeMartialArts:
          description: Martial arts
          $ref: '#/components/schemas/PhysicalActivityTypeMartialArts'
        physicalActivityTypeHomeExercises:
          description: Home exercise
          $ref: '#/components/schemas/PhysicalActivityTypeHomeExercises'
        physicalActivityTypeDancingGymnastics:
          description: Gymnastics
          $ref: '#/components/schemas/PhysicalActivityTypeDancingGymnastics'
        physicalActivityTypeFitnessClasses:
          description: Fitness class
          $ref: '#/components/schemas/PhysicalActivityTypeFitnessClasses'
        physicalActivityTypeOther:
          description: Other active exercises
          $ref: '#/components/schemas/PhysicalActivityTypeOther'
        physicalActivityExerciseCompany:
          description: Company during exercise
          $ref: '#/components/schemas/PhysicalActivityExerciseCompany'
        physicalActivityExerciseLocation:
          description: Exercise location
          $ref: '#/components/schemas/PhysicalActivityExerciseLocation'
        physicalActivityExerciseTracking:
          description: Exercise tracking
          $ref: '#/components/schemas/PhysicalActivityExerciseTracking'
    FriendFinderResponse:
      title: FriendFinderResponse
      type: object
      properties:
        vitalityMembers:
          type: array
          items:
            $ref: '#/components/schemas/VitalityMember'
          description: ''
    FriendDetailsResponse:
      title: FriendDetailsResponse
      type: object
      properties:
        friends:
          $ref: '#/components/schemas/Friends'
    FriendsListResponse:
      title: FriendsListResponse
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Friends'
          description: ''
    GroupEditRequest:
      title: GroupEditRequest
      type: object
      properties:
        group-name-new:
          type: string
          description: New group name for the friends
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Friends87'
          description: ''
        membership-no:
          type: string
          description: Vitality membership number (Mandatory for full Vitality members)
        member-id:
          type: string
          description: Member id for non membership accounts
    GroupListResponse:
      title: GroupListResponse
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
    PendingGroupResponse:
      title: PendingGroupResponse
      type: object
      properties:
        groupRequest:
          type: array
          items:
            $ref: '#/components/schemas/GroupRequest'
          description: ''
    MentalAssessmentRequest:
      title: MentalAssessmentRequest
      type: object
      properties:
        mentalHealthPsychHappinessInPastMonth:
          description: Mental Happiness
          $ref: '#/components/schemas/MentalHealthPsychHappinessInPastMonth'
        stressKesslerStressDepressed:
          description: Stress depressed
          $ref: '#/components/schemas/StressKesslerStressDepressed'
        stressKesslerStressEffort:
          description: Stress effort
          $ref: '#/components/schemas/StressKesslerStressEffort'
        stressKesslerStressHopeless:
          description: Stress hopeless
          $ref: '#/components/schemas/StressKesslerStressHopeless'
        stressKesslerStressNervous:
          description: Stress nervous
          $ref: '#/components/schemas/StressKesslerStressNervous'
        stressKesslerStressRestless:
          description: Stress restless
          $ref: '#/components/schemas/StressKesslerStressRestless'
        stressKesslerStressSad:
          description: Stress sad
          $ref: '#/components/schemas/StressKesslerStressSad'
        stressKesslerStressTired:
          description: Stress tired
          $ref: '#/components/schemas/StressKesslerStressTired'
        stressKesslerStressVeryNervous:
          description: Stress very nervous
          $ref: '#/components/schemas/StressKesslerStressVeryNervous'
        stressKesslerStressVeryRestless:
          description: Stress very restless
          $ref: '#/components/schemas/StressKesslerStressVeryRestless'
        stressKesslerStressWorthless:
          description: Stress worthless
          $ref: '#/components/schemas/StressKesslerStressWorthless'
        lifestyleSleepHoursPerDay:
          type: string
          description: Sleeping hours per day
        lifestyleSleeplessnessInLastFourWeeks:
          description: Sleeplessness in last month
          $ref: '#/components/schemas/LifestyleSleeplessnessInLastFourWeeks'
        mentalHealthStressAtWork:
          description: Stress at work
          $ref: '#/components/schemas/MentalHealthStressAtWork'
        mentalHealthStressWithinFamilyRelationship:
          description: Stress due to  realtions
          $ref: '#/components/schemas/MentalHealthStressWithinFamilyRelationship'
        mentalHealthStressFamilyMemberDiedMe:
          description: Stress due to family loss
          $ref: '#/components/schemas/MentalHealthStressFamilyMemberDiedMe'
        mentalHealthStressFamilyMemberDiedOther:
          description: Stress due to family loss others
          $ref: '#/components/schemas/MentalHealthStressFamilyMemberDiedOther'
        mentalHealthStressCloseFriendDiedMe:
          description: Stress due to friends loss
          $ref: '#/components/schemas/MentalHealthStressCloseFriendDiedMe'
        mentalHealthStressCloseFriendDiedOther:
          description: Stress due to friends loss others
          $ref: '#/components/schemas/MentalHealthStressCloseFriendDiedOther'
        mentalHealthStressSeriousCarAccidentMe:
          description: Stress due to car accident
          $ref: '#/components/schemas/MentalHealthStressSeriousCarAccidentMe'
        mentalHealthStressSeriousCarAccidentOther:
          description: Stress due to car accident others
          $ref: '#/components/schemas/MentalHealthStressSeriousCarAccidentOther'
        mentalHealthStressLifeThreateningDisasterMe:
          description: Stress due to life threaning disaster
          $ref: '#/components/schemas/MentalHealthStressLifeThreateningDisasterMe'
        mentalHealthStressLifeThreateningDisasterOther:
          description: Stress due to life threaning disaster others
          $ref: '#/components/schemas/MentalHealthStressLifeThreateningDisasterOther'
        mentalHealthStressViolentCrimeVictimMe:
          description: Stress due to violent crime
          $ref: '#/components/schemas/MentalHealthStressViolentCrimeVictimMe'
        mentalHealthStressViolentCrimeVictimOther:
          description: Stress due to violent crime others
          $ref: '#/components/schemas/MentalHealthStressViolentCrimeVictimOther'
        mentalHealthStressOtherSeriousEventMe:
          description: Stress due to serious event
          $ref: '#/components/schemas/MentalHealthStressOtherSeriousEventMe'
        mentalHealthStressOtherSeriousEventOther:
          description: Stress due to serious event others
          $ref: '#/components/schemas/MentalHealthStressOtherSeriousEventOther'
        mentalHealthSupportFamilyGivesEmotionalSupport:
          description: Family support
          $ref: '#/components/schemas/MentalHealthSupportFamilyGivesEmotionalSupport'
        mentalHealthSupportCanCountOnFriends:
          description: Friends support
          $ref: '#/components/schemas/MentalHealthSupportCanCountOnFriends'
        mentalHealthSupportSpecialPersonInNeed:
          description: Support for person in ndeed
          $ref: '#/components/schemas/MentalHealthSupportSpecialPersonInNeed'
        mentalHealthStressStatus:
          description: Health stress status
          $ref: '#/components/schemas/MentalHealthStressStatus'
    MemberAssessmentResponse:
      title: MemberAssessmentResponse
      type: object
      properties:
        assessments:
          type: array
          items:
            $ref: '#/components/schemas/Assessment'
          description: ''
    MemberChallengeResponse:
      title: MemberChallengeResponse
      type: object
      properties:
        memberChallenges:
          type: array
          items:
            $ref: '#/components/schemas/MemberChallenge130'
          description: ''
    MemberBankListResponse:
      title: MemberBankListResponse
      type: object
      properties:
        bankList:
          type: array
          items:
            $ref: '#/components/schemas/BankList'
          description: ''
    MemberFinancialsResponse:
      title: MemberFinancialsResponse
      type: object
      properties:
        banks:
          type: array
          items:
            $ref: '#/components/schemas/Bank'
          description: ''
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
          description: ''
    MemberFinancialsUpdateRequest:
      title: MemberFinancialsUpdateRequest
      type: object
      properties:
        banks:
          $ref: '#/components/schemas/Banks'
    MemberRewardsResponse:
      title: MemberRewardsResponse
      type: object
      properties:
        availableRewards:
          type: string
          description: Count of the rewards available to the  member
        rewardsCategory:
          type: array
          items:
            $ref: '#/components/schemas/RewardsCategory'
          description: ''
    MembersDemographicsResponse:
      title: MembersDemographicsResponse
      type: object
      properties:
        memberDetails:
          $ref: '#/components/schemas/MemberDetails'
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: ''
        email:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          description: ''
        telephone:
          type: array
          items:
            $ref: '#/components/schemas/Telephone'
          description: ''
    MemberDemographicsUpdateRequest:
      title: MemberDemographicsUpdateRequest
      type: object
      properties:
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: ''
        email:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          description: ''
        telephone:
          type: array
          items:
            $ref: '#/components/schemas/Telephone'
          description: ''
    MemberProfileImageResponse:
      title: MemberProfileImageResponse
      type: object
      properties:
        memberProfileImage:
          $ref: '#/components/schemas/MemberProfileImage'
    MemberOptOutSeacrhResponse:
      title: MemberOptOutSeacrhResponse
      type: object
      properties:
        memberOptOutSeacrh:
          $ref: '#/components/schemas/MemberOptOutSeacrh'
    MembershipDetailsResponse:
      title: MembershipDetailsResponse
      type: object
      properties:
        membership:
          $ref: '#/components/schemas/Membership'
        members:
          $ref: '#/components/schemas/Members'
    NotificationManagementResponse:
      title: NotificationManagementResponse
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
          description: ''
    NotificationManagementPostRequest:
      title: NotificationManagementPostRequest
      type: object
      properties:
        deviceDetails:
          $ref: '#/components/schemas/DeviceDetails'
    NutritionAssessmentRequest:
      title: NutritionAssessmentRequest
      type: object
      properties:
        nutritionFruitAndVegetablePerDay:
          type: string
          description: Fruits and vegetables intake per day
        nutritionServingsDailyWholegrain:
          type: string
          description: Wholegrain intake per day
        nutritionAddSaltBeforeTasting:
          description: Salt intake
          $ref: '#/components/schemas/NutritionAddSaltBeforeTasting'
        nutritionSaltyFoodConsumption:
          description: Salty food intake
          $ref: '#/components/schemas/NutritionSaltyFoodConsumption'
        nutritionIntakeDairyConsumptionLowFatOrFatFree:
          description: Low fat or fat free dairy intake
          $ref: '#/components/schemas/NutritionIntakeDairyConsumptionLowFatOrFatFree'
        nutritionIntakeFrequencyAddFatAfterCooking:
          description: Fat addition to cooked food
          $ref: '#/components/schemas/NutritionIntakeFrequencyAddFatAfterCooking'
        nutritionServingsDailyFattyFoods:
          type: string
          description: Fatty food servings
        nutritionIntakeMeatConsumptionLean:
          description: Lean meat intake
          $ref: '#/components/schemas/NutritionIntakeMeatConsumptionLean'
        nutritionServingsDailySugarSweetenedCupsOfTeaOrCoffee:
          type: string
          description: Sugar intake per drink
        nutritionServingsDailyDrinksSugary:
          type: string
          description: Sugary drinks intake
        nutritionEatBreakfast:
          description: Breakfast intake
          $ref: '#/components/schemas/NutritionEatBreakfast'
        nutritionEatLunch:
          description: Lunch intake
          $ref: '#/components/schemas/NutritionEatLunch'
        nutritionEatDinner:
          description: Dinner intake
          $ref: '#/components/schemas/NutritionEatDinner'
        nutritionEatSnacks:
          description: Snack intake per day
          $ref: '#/components/schemas/NutritionEatSnacks'
        nutritionWhenSnacking:
          description: Snacking time
          $ref: '#/components/schemas/NutritionWhenSnacking'
        nutritionEatJunkFood:
          description: Junk food intake
          $ref: '#/components/schemas/NutritionEatJunkFood'
        nutritionFruitIntake:
          type: string
          description: Fruit intake
        nutritionVegetableIntake:
          type: string
          description: Vegetable intake
        nutritionDairyServingsPerDay:
          type: string
          description: Dairy intake
        nutritionHighFatMeatChoice:
          description: Fatty meat intake
          $ref: '#/components/schemas/NutritionHighFatMeatChoice'
        nutritionEatSaltyFood:
          description: Salty food intake
          $ref: '#/components/schemas/NutritionEatSaltyFood'
        nutritionFattyFishMoreThan2PerWeek:
          description: Fish intake
          $ref: '#/components/schemas/NutritionFattyFishMoreThan2PerWeek'
        nutritionAddButter:
          description: Butter intake
          $ref: '#/components/schemas/NutritionAddButter'
        nutritionAddGoodOil:
          description: Oil intake
          $ref: '#/components/schemas/NutritionAddGoodOil'
        nutritionRegularDressing:
          description: Dressing intake
          $ref: '#/components/schemas/NutritionRegularDressing'
        nutritionAddSalt:
          description: Salt addition
          $ref: '#/components/schemas/NutritionAddSalt'
        nutritionEatSweetFoods:
          description: Sweets intake
          $ref: '#/components/schemas/NutritionEatSweetFoods'
        nutritionEatingHabitPerception:
          description: Perception of eating habit
          $ref: '#/components/schemas/NutritionEatingHabitPerception'
    PartnerDetailsResponse:
      title: PartnerDetailsResponse
      type: object
      properties:
        partnerId:
          type: string
          description: The unique identification of partner.
        partnerDesc:
          type: string
          description: Name of partner.
        partnerType:
          description: Retrieves various types of partners.
          $ref: '#/components/schemas/PartnerType'
        partnerBenefits:
          type: array
          items:
            $ref: '#/components/schemas/PartnerBenefit'
          description: ''
        partnerRewards:
          type: array
          items:
            $ref: '#/components/schemas/PartnerReward'
          description: ''
    PartnerListResponse:
      title: PartnerListResponse
      type: object
      properties:
        partnerList:
          type: array
          items:
            $ref: '#/components/schemas/PartnerList'
          description: ''
    PartnerBranchDetailsResponse:
      title: PartnerBranchDetailsResponse
      type: object
      properties:
        partnerBranchList:
          type: array
          items:
            $ref: '#/components/schemas/PartnerBranchList'
          description: ''
    PartnerEligibilityResponse:
      title: PartnerEligibilityResponse
      type: object
      properties:
        partnerRewards:
          type: array
          items:
            $ref: '#/components/schemas/PartnerReward212'
          description: ''
    PartnerEligibilityTokenResponse:
      title: PartnerEligibilityTokenResponse
      type: object
      properties:
        token:
          type: string
          description: One time token for partner benefits redemption.
    PendingFriendsResponse:
      title: PendingFriendsResponse
      type: object
      properties:
        pendingFriends:
          type: array
          items:
            $ref: '#/components/schemas/PendingFriend'
          description: ''
    PointsConfigResponse:
      title: PointsConfigResponse
      type: object
      properties:
        pointsConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/PointsConfiguration'
          description: ''
    PointsHistoryResponse:
      title: PointsHistoryResponse
      type: object
      properties:
        pointsTotal:
          type: string
          description: Total points earned by the member .
        pointsPerDay:
          type: array
          items:
            $ref: '#/components/schemas/PointsPerDay'
          description: ''
    PointsHistoryLookUpResponse:
      title: PointsHistoryLookUpResponse
      type: object
      properties:
        pointsTotal:
          type: string
          description: Total points earned by the member .
        pointsPerDay:
          type: array
          items:
            $ref: '#/components/schemas/PointsPerDay229'
          description: ''
    PointsResponse:
      title: PointsResponse
      type: object
      properties:
        pointsTotal:
          type: integer
          description: Total points for this policy year.
          format: int64
        pointsPerDay:
          type: array
          items:
            $ref: '#/components/schemas/PointsPerDay231'
          description: ''
    PointsSummaryResponse:
      title: PointsSummaryResponse
      type: object
      properties:
        pointsThisWeek:
          type: integer
          description: Points achieved this week.
          format: int64
        pointsThisMonth:
          type: integer
          description: Points achieved this month.
          format: int64
        totalPoints:
          type: integer
          description: Total points earned by the user.
          format: int64
        pointsWeeklyChallenges:
          type: string
          description: This is the current points achieved
        pointsToWeeklyChallenges:
          type: integer
          description: Weekly challenge points.
          format: int64
        pointsToChallenges:
          type: integer
          description: TThese are goals point.
          format: int64
        pointsToNextStatus:
          type: integer
          description: Points to achieve next status
          format: int64
    RewardsCouponRequest:
      title: RewardsCouponRequest
      type: object
      properties:
        category-id:
          type: string
          description: 'Unique category id e.g. voucher , cashback etc.'
        coupon-id:
          type: string
          description: Identifier of a coupon for a reward.
        partnerId:
          type: string
          description: Unique partner id.
        membership-no:
          type: string
          description: Vitality membership number (Mandatory for full Vitality members)
        member-id:
          type: string
          description: Member id for non membership accounts
    RewardConfigurationResponse:
      title: RewardConfigurationResponse
      type: object
      properties:
        rewardConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/RewardConfiguration'
          description: ''
    RewardsRedemptionRequest:
      title: RewardsRedemptionRequest
      type: object
      properties:
        donateOption:
          type: string
          description: Flag to indicate member donating the rewards to charity.
        category-id:
          type: string
          description: 'Unique category id e.g. voucher , cashback etc.'
        partnerId:
          type: string
          description: Unique partner id.
        membership-no:
          type: string
          description: Vitality membership number (Mandatory for full Vitality members)
        member-id:
          type: string
          description: Member id for non membership accounts
    RewardsRedemptionResponse:
      title: RewardsRedemptionResponse
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/Reward'
          description: ''
    RewardsStatementResponse:
      title: RewardsStatementResponse
      type: object
      properties:
        rewardsStatement:
          type: array
          items:
            $ref: '#/components/schemas/RewardsStatement'
          description: ''
    ScreeningAssessmentRequest:
      title: ScreeningAssessmentRequest
      type: object
      properties:
        appointmentDate:
          type: string
          description: Date on which assessment has been appointed.
        assessmentDetails:
          $ref: '#/components/schemas/AssessmentDetails'
        membershipNo:
          type: string
          description: Vitality membership number of the user.
    DeclarationRequest:
      title: DeclarationRequest
      type: object
      properties:
        appointmentDate:
          type: string
          description: Date on which assessment has been appointed.
        assessmentDetails:
          $ref: '#/components/schemas/AssessmentDetails250'
        membershipNo:
          type: string
          description: Vitality membership number of the user.
    LinkGarminTokenRequest:
      title: LinkGarminTokenRequest
      type: object
      properties:
        refreshToken:
          type: string
          description: Garmin refresh token of a specific member.
        token:
          type: string
          description: Garmin linking token of a specific member.
        userId:
          type: string
          description: Garmin userId of a specific member.
    VitalityThresholdResponse:
      title: VitalityThresholdResponse
      type: object
      properties:
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/Threshold'
          description: ''
    VHRGeneralAssessmentRequest:
      title: VHRGeneralAssessmentRequest
      type: object
      properties:
        lifestyleHealthAssessment:
          description: General health status
          $ref: '#/components/schemas/LifestyleHealthAssessment'
        lifestyleImproveExercise:
          description: Excercise indicator
          $ref: '#/components/schemas/LifestyleImproveExercise'
        lifestyleImproveEating:
          description: Eating indicator
          $ref: '#/components/schemas/LifestyleImproveEating'
        lifestyleImproveSleep:
          description: Sleeping indicator
          $ref: '#/components/schemas/LifestyleImproveSleep'
        lifestyleImproveStress:
          description: Stress indicator
          $ref: '#/components/schemas/LifestyleImproveStress'
        lifestyleImproveFamily:
          description: Family indicator
          $ref: '#/components/schemas/LifestyleImproveFamily'
        lifestyleImproveFinance:
          description: Finance indicator
          $ref: '#/components/schemas/LifestyleImproveFinance'
        lifestyleImproveWorkLifeBalance:
          description: WorkLifeBalance indicator
          $ref: '#/components/schemas/LifestyleImproveWorkLifeBalance'
        medicalHeightValue:
          type: string
          description: Height value
        medicalHeightMetric:
          description: Measurement
          $ref: '#/components/schemas/MedicalHeightMetric'
        medicalWeightValue:
          type: string
          description: Weight value
        medicalWeightMetric:
          description: Measurement
          $ref: '#/components/schemas/MedicalWeightMetric'
        medicalWaistCircumferenceValue:
          type: string
          description: Waist value
        medicalWaistCircumferenceMetric:
          description: Measurement
          $ref: '#/components/schemas/MedicalWaistCircumferenceMetric'
        medicalWeightPerception:
          description: Weight perception
          $ref: '#/components/schemas/MedicalWeightPerception'
        medicalBloodPressureRange:
          description: Blood Pressure range
          $ref: '#/components/schemas/MedicalBloodPressureRange'
        medicalSystolic:
          type: string
          description: Systolic value
        medicalDiastolic:
          type: string
          description: Diastolic value
        medicalFastingGlucoseRange:
          description: Glucose range
          $ref: '#/components/schemas/MedicalFastingGlucoseRange'
        medicalFastingGlucoseValue:
          type: string
          description: Glucose value
        medicalFastingGlucoseMetric:
          description: Glucose metric
          $ref: '#/components/schemas/MedicalFastingGlucoseMetric'
        medicalRandomGlucoseRange:
          description: Glucose range
          $ref: '#/components/schemas/MedicalRandomGlucoseRange'
        medicalRandomGlucoseValue:
          type: string
          description: Glucose value
        medicalRandomGlucoseMetric:
          description: Glucose metric
          $ref: '#/components/schemas/MedicalRandomGlucoseMetric'
        medicalCholesterolRange:
          description: Cholesterol range
          $ref: '#/components/schemas/MedicalCholesterolRange'
        medicalTotalCholesterolValue:
          type: string
          description: Cholesterol value
        medicalTotalCholesterolMetric:
          description: Cholesterol metric
          $ref: '#/components/schemas/MedicalTotalCholesterolMetric'
        lifestyleSmokingStatus:
          description: Smoking status
          $ref: '#/components/schemas/LifestyleSmokingStatus'
        lifestyleExSmokingConsumptionCigarettes:
          type: string
          description: Smoking Consumption
        medicalSmokingStoppedPeriodInMonths:
          type: string
          description: ExSmoker period
        lifestyleSmokingConsumptionCigarettes:
          type: string
          description: Smoking consumption
        medicalSmokingPeriodInMonths:
          type: string
          description: Smoking timeline
        lifestyleSmokingECigarettes:
          description: eSmoking indicator
          $ref: '#/components/schemas/LifestyleSmokingECigarettes'
        lifestyleAlcoholDrinker:
          description: Alcohol drinking indicator
          $ref: '#/components/schemas/LifestyleAlcoholDrinker'
        lifestyleAlcoholConsumptionFrequencyPerDay:
          type: string
          description: Alcohol intake count  per day
        lifestyleAlcoholConsumptionFrequencyPerWeek:
          type: string
          description: Alcohol intake count per week
        medicalHeartDisease:
          description: Heart disease indicator
          $ref: '#/components/schemas/MedicalHeartDisease'
        medicalStroke:
          description: Stroke indicator
          $ref: '#/components/schemas/MedicalStroke'
        medicalHypertension:
          description: Blood pressure indicator
          $ref: '#/components/schemas/MedicalHypertension'
        medicalCholesterolHigh:
          description: Cholesterol indicator
          $ref: '#/components/schemas/MedicalCholesterolHigh'
        medicalDiabetes:
          description: Diabetes indicator
          $ref: '#/components/schemas/MedicalDiabetes'
        medicalCancer:
          description: Cancer indicator
          $ref: '#/components/schemas/MedicalCancer'
        mentalHealthDepression:
          description: Depression indicator
          $ref: '#/components/schemas/MentalHealthDepression'
        medicalBoneDensityConditionOsteoporosis:
          description: Osteoporosis indicator
          $ref: '#/components/schemas/MedicalBoneDensityConditionOsteoporosis'
        medicalAsthma:
          description: Asthma indicator
          $ref: '#/components/schemas/MedicalAsthma'
        medicalChronicLungDisease:
          description: LungDisease indicator
          $ref: '#/components/schemas/MedicalChronicLungDisease'
        medicalArthritis:
          description: Arthritis indicator
          $ref: '#/components/schemas/MedicalArthritis'
        medicalHistoryAllergies:
          description: Allergies indicator
          $ref: '#/components/schemas/MedicalHistoryAllergies'
        medicalHistoryBackPain:
          description: Back pain indicator
          $ref: '#/components/schemas/MedicalHistoryBackPain'
        medicalHistoryChronicPain:
          description: Pain indicator
          $ref: '#/components/schemas/MedicalHistoryChronicPain'
        medicalHistoryHeartBurnReflux:
          description: Heart burn indicator
          $ref: '#/components/schemas/MedicalHistoryHeartBurnReflux'
        medicalMenopause:
          type: string
          description: Menopause indicator
        medicalMigraine:
          description: Migraine indicator
          $ref: '#/components/schemas/MedicalMigraine'
        medicalSleepDisorder:
          description: Sleep indicator
          $ref: '#/components/schemas/MedicalSleepDisorder'
        medicalOtherConditionsDuplicate:
          description: Duplicate indicator
          $ref: '#/components/schemas/MedicalOtherConditionsDuplicate'
        medicalHistoryThyroid:
          description: Thyroid indicator
          $ref: '#/components/schemas/MedicalHistoryThyroid'
        medicalPregnant:
          description: Pregnancy indicator
          $ref: '#/components/schemas/MedicalPregnant'
        medicalFamilyHeartDisease:
          description: Family heart disease indicator
          $ref: '#/components/schemas/MedicalFamilyHeartDisease'
        MedicalFamilyStroke:
          description: Family stroke indicator
          $ref: '#/components/schemas/MedicalFamilyStroke'
        medicalFamilyHypertension:
          description: Family blood pressure indicator
          $ref: '#/components/schemas/MedicalFamilyHypertension'
        medicalFamilyCholesterol:
          description: Family cholesterol indicator
          $ref: '#/components/schemas/MedicalFamilyCholesterol'
        medicalFamilyDiabetes:
          description: Family diabetes indicator
          $ref: '#/components/schemas/MedicalFamilyDiabetes'
        medicalFamilyCancer:
          description: Family cancer indicator
          $ref: '#/components/schemas/MedicalFamilyCancer'
        medicalFamilyOsteoporosis:
          description: Family osteoporosis indicator
          $ref: '#/components/schemas/MedicalFamilyOsteoporosis'
        medicalFamilyAsthma:
          description: Family asthma indicator
          $ref: '#/components/schemas/MedicalFamilyAsthma'
        medicalFamilyChronicLungDisease:
          description: Family lungDisease indicator
          $ref: '#/components/schemas/MedicalFamilyChronicLungDisease'
    WorkoutTrackerResponse:
      title: WorkoutTrackerResponse
      type: object
      properties:
        workouts:
          type: array
          items:
            $ref: '#/components/schemas/Workout'
          description: ''
    AssessmentConfiguration:
      title: AssessmentConfiguration
      type: object
      properties:
        assessmentId:
          type: string
          description: Assessment Id.
        assessmentType:
          type: string
          description: 'Type of the assessment i.e. Improve your health, Reduce stress.'
        assessmentDesc:
          type: string
          description: Assessment details.
        renewalDate:
          type: string
          description: Renewal date for assessment .
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
          description: ''
    Attribute:
      title: Attribute
      type: object
      properties:
        attributeId:
          type: string
          description: The health attribute which is being affected for the goal .
        attributeType:
          type: string
          description: Attribute type e.g. MentalWellbeingStressor etc.
        attributeValue:
          type: integer
          description: The value of the attribute provided in the assessment.
          format: int64
        assessmentSourceType:
          type: string
          description: Whether the assessment is online(Untrusted) or done at partner site(Trusted)
    VitalityAge:
      title: VitalityAge
      type: object
      properties:
        age:
          type: integer
          description: Actual age of the member
          format: int64
        ageBreakup:
          type: array
          items:
            $ref: '#/components/schemas/AgeBreakup'
          description: What is the difference between Vitality age and actual age.
    AgeBreakup:
      title: AgeBreakup
      type: object
      properties:
        ageValue:
          type: integer
          description: Years differnce due to assessment
          format: int64
        ageReason:
          type: string
          description: Reason for differnce due to assessment
    Feedback:
      title: Feedback
      type: object
      properties:
        feedbackId:
          type: string
        feedbackDesc:
          type: string
    FeedbackIndicator:
      title: FeedbackIndicator
      type: object
      properties:
        feedbackId:
          type: string
        feedbackValue:
          type: string
        feedbackTarget:
          type: string
        feedbackUnitOfMeasure:
          type: string
        feedbackRangeIndicator:
          $ref: '#/components/schemas/FeedbackRangeIndicator'
    FeedbackRangeIndicator:
      title: FeedbackRangeIndicator
      enum:
        - 'true'
        - 'false'
      type: string
      example: 'true'
      x-enum-elements:
        - name: 'true'
          description: ''
        - name: 'false'
          description: ''
    AssessmentData:
      title: AssessmentData
      type: object
      properties:
        assessmentId:
          type: integer
          description: Assessment Id.
          format: int64
        assessmentType:
          type: string
          description: Types of the assessment
        assessmentDesc:
          type: string
          description: Assessment description.
        completionDate:
          type: string
          description: Date for which assessment has been completed.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute11'
          description: ''
        assessmentDate:
          type: string
          description: Date on which assessment has been taken.
        assessmentSourceType:
          type: string
          description: Whether the assessment has been taken from trusted or untrusted site
        effectiveFromDate:
          type: string
          description: Starting date of assessment.
        effectiveToDate:
          type: string
          description: End date of assessment.
    Attribute11:
      title: Attribute11
      type: object
      properties:
        attributeId:
          type: string
          description: Attribute id e.g. RiskSmokingTargetRelativeRisk .
        attributeType:
          type: string
          description: Types of attribue e.g. MentalWellbeingPshychological.
        attributeValue:
          type: string
          description: The attribute value which has been used in VHR or VHC
    RiskFactor:
      title: RiskFactor
      enum:
        - Cholesterol
        - BMI
        - Physical_Activity
        - Diabetes
        - Fasting_Blood_Glucose
        - Blood_Pressure_Combined
      type: string
      description: Specifies various risk factors for the member.
      example: Cholesterol
      x-enum-elements:
        - name: Cholesterol
          description: ''
        - name: BMI
          description: ''
        - name: Physical_Activity
          description: ''
        - name: Diabetes
          description: ''
        - name: Fasting_Blood_Glucose
          description: ''
        - name: Blood_Pressure_Combined
          description: ''
    CommunityChallengeInvite:
      title: CommunityChallengeInvite
      type: object
      properties:
        challengeId:
          type: string
          description: Identifier of the goal
        challengeName:
          type: string
          description: Name of the goal/ challenge
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType'
        inviteId:
          type: string
          description: Types of challenges
    ChallengeType:
      title: ChallengeType
      enum:
        - Community
      type: string
      description: Types of challenges
      example: Community
      x-enum-elements:
        - name: Community
          description: ''
    CommunityChallenge:
      title: CommunityChallenge
      type: object
      properties:
        challengeId:
          type: string
          description: Identifier of the goal
        challengeName:
          type: string
          description: Name of the goal/ challenge
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType'
    MemberChallenge:
      title: MemberChallenge
      type: object
      properties:
        challengeId:
          type: string
          description: Identifier of the goal
        challengeName:
          type: string
          description: Name of the goal/ challenge
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType22'
        metric:
          type: string
          description: Unit of measurement
        riskCategory:
          type: string
          description: Assessment  categories e.g. improve your health.
        riskFactor:
          $ref: '#/components/schemas/RiskFactor23'
        challengeEffectiveFrom:
          type: string
          description: Start date of the challenge to be accepted by the member
        challengeEffectiveTo:
          type: string
          description: End date of the challenge to be completed by the member
        eventId:
          type: string
        awardType:
          type: string
          description: Gives you points earned by the member.
        awardDesc:
          type: string
          description: Points earned by completing which assessment.
        challengeStatus:
          description: Status in which current goal is
          $ref: '#/components/schemas/ChallengeStatus'
        challengeStatusFromDate:
          type: string
          description: start date for the challenge status
        challengeStatusToDate:
          type: string
          description: End date for the challenge status
        recommendation:
          $ref: '#/components/schemas/Recommendation'
        progessDetails:
          $ref: '#/components/schemas/ProgessDetails'
    ChallengeType22:
      title: ChallengeType22
      enum:
        - Weekly
        - Group
        - Member Challenge
        - Community
      type: string
      description: Types of challenges
      example: Weekly
      x-enum-elements:
        - name: Weekly
          description: ''
        - name: Group
          description: ''
        - name: Enum_Member Challenge
          description: ''
        - name: Community
          description: ''
    RiskFactor23:
      title: RiskFactor23
      enum:
        - Cholesterol
        - BMI
        - Physical_Activity
        - Diabetes
        - Fasting_Blood_Glucose
        - Blood_Pressure_Combined
      type: string
      example: Cholesterol
      x-enum-elements:
        - name: Cholesterol
          description: ''
        - name: BMI
          description: ''
        - name: Physical_Activity
          description: ''
        - name: Diabetes
          description: ''
        - name: Fasting_Blood_Glucose
          description: ''
        - name: Blood_Pressure_Combined
          description: ''
    ChallengeStatus:
      title: ChallengeStatus
      enum:
        - Selected
        - Achieved
        - Completed
      type: string
      description: Status in which current goal is
      example: Selected
      x-enum-elements:
        - name: Selected
          description: ''
        - name: Achieved
          description: ''
        - name: Completed
          description: ''
    Recommendation:
      title: Recommendation
      type: object
      properties:
        feedback:
          $ref: '#/components/schemas/Feedback26'
        recommendationReason:
          type: string
          description: Why the goal has been recommended for the member.
    Feedback26:
      title: Feedback26
      type: object
      properties:
        feedbackId:
          type: string
          description: The identifier of the feedback why the goal is assigned.
        feedbackDesc:
          type: string
          description: Description of the feedback.
    ProgessDetails:
      title: ProgessDetails
      type: object
      properties:
        challengeStartDate:
          type: string
          description: The date on which the member has actually started the challenge.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute28'
          description: ''
    Attribute28:
      title: Attribute28
      type: object
      properties:
        attributeId:
          type: string
          description: The health attribute which is being affected for the goal.
        attributeType:
          type: string
        attributeValue:
          type: integer
          description: The value of the attribute provided in the assessment.
          format: int64
        assessmentDate:
          type: string
          description: The date on which the assessment has been taken by the member.
        assessmentSourceType:
          type: string
          description: Whether the assessment is online(Untrusted) or done at partner site(Trusted)
    DeviceDetail:
      title: DeviceDetail
      type: object
      properties:
        deviceName:
          type: string
          description: Device name what user has used for recording activity details
        deviceLinkedStatus:
          type: string
          description: Specifies whether the device is linked or not.
        deviceLinkedDate:
          type: string
          description: Date on which device has been linked.
        deviceLastSyncDateTime:
          type: string
          description: Date and time on which device has been last sync.
        captureDetails:
          type: array
          items:
            $ref: '#/components/schemas/CaptureDetail'
          description: ''
    CaptureDetail:
      title: CaptureDetail
      type: object
      properties:
        fitnessData:
          $ref: '#/components/schemas/FitnessData'
        nutrition:
          type: string
          description: Nutrition details of the user.
        sleep:
          $ref: '#/components/schemas/Sleep'
    FitnessData:
      title: FitnessData
      type: object
      properties:
        date:
          type: string
          description: Date on which activity has been done by the user.
        recordedTime:
          type: string
          description: Time recorded at which user has performed the activity.
        steps:
          type: string
          description: Describes how many steps user has walked out.
        distance:
          type: string
          description: Distance covered by the user during activity.
        heartRate:
          type: string
          description: Heart rate of the user recorded during activity.
        speedData:
          $ref: '#/components/schemas/SpeedData'
        caloriesBurnt:
          type: string
          description: How much calories burnt durring the activity.
        weight:
          type: string
          description: weight of the user.
    SpeedData:
      title: SpeedData
      type: object
      properties:
        workoutType:
          type: string
          description: 'Various types of the workout user can perform e.g. cycling , walking etc.'
        workoutDesc:
          type: string
          description: Describes workout details.
    Sleep:
      title: Sleep
      type: object
      properties:
        date:
          type: string
          description: Date recorded to capture sleep data.
        hoursSlept:
          type: string
          description: How many hours user has slept.
    Device:
      title: Device
      type: object
      properties:
        deviceName:
          type: string
          description: Device name used for tracking by the user.
        trackingDetails:
          $ref: '#/components/schemas/TrackingDetails'
    TrackingDetails:
      title: TrackingDetails
      type: object
      properties:
        linkedStatus:
          type: string
          description: device link status for a member.
        deviceLastSyncDateTime:
          type: string
          description: Date and time on which device has been last sync.
        attributeType:
          description: Various types of attributes available for the device.
          $ref: '#/components/schemas/AttributeType'
        attributeDesc:
          type: string
          description: Description for the attributes available.
    AttributeType:
      title: AttributeType
      enum:
        - Heart Rate
        - Speed
        - Calories
        - Steps
      type: string
      description: Various types of attributes available for the device.
      example: Heart Rate
      x-enum-elements:
        - name: Enum_Heart Rate
          description: ''
        - name: Speed
          description: ''
        - name: Calories
          description: ''
        - name: Steps
          description: ''
    MedicalNoExerciseDoctor:
      title: MedicalNoExerciseDoctor
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Do not exercise
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalNoExerciseCondition:
      title: MedicalNoExerciseCondition
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: No medical conditions
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityExerciseDaysPerWeek:
      title: PhysicalActivityExerciseDaysPerWeek
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
      type: integer
      description: Activity days per week
      example: 0
      x-enum-elements:
        - name: Enum_0
          description: ''
        - name: Enum_1
          description: ''
        - name: Enum_2
          description: ''
        - name: Enum_3
          description: ''
        - name: Enum_4
          description: ''
        - name: Enum_5
          description: ''
        - name: Enum_6
          description: ''
        - name: Enum_7
          description: ''
    PhysicalActivityExerciseIntensity:
      title: PhysicalActivityExerciseIntensity
      enum:
        - Low
        - Moderate
        - High
        - Vigorous
      type: string
      description: Exercise intensity
      example: Low
      x-enum-elements:
        - name: Low
          description: ''
        - name: Moderate
          description: ''
        - name: High
          description: ''
        - name: Vigorous
          description: ''
    PhysicalActivityCardioExerciseFrequency:
      title: PhysicalActivityCardioExerciseFrequency
      enum:
        - Rarely or never
        - 1 or 2 times per week
        - 3 to 5 times per week
        - 6 to 7 times per week
      type: string
      description: Cardio frequency
      example: Rarely or never
      x-enum-elements:
        - name: Enum_Rarely or never
          description: ''
        - name: Enum_1 or 2 times per week
          description: ''
        - name: Enum_3 to 5 times per week
          description: ''
        - name: Enum_6 to 7 times per week
          description: ''
    PhysicalActivityStrengthExerciseFrequency:
      title: PhysicalActivityStrengthExerciseFrequency
      enum:
        - Rarely or never
        - 1 or 2 times per week
        - 3 to 5 times per week
        - 6 to 7 times per week
      type: string
      description: Strength exercise frequency
      example: Rarely or never
      x-enum-elements:
        - name: Enum_Rarely or never
          description: ''
        - name: Enum_1 or 2 times per week
          description: ''
        - name: Enum_3 to 5 times per week
          description: ''
        - name: Enum_6 to 7 times per week
          description: ''
    PhysicalActivityFlexibilityExerciseFrequency:
      title: PhysicalActivityFlexibilityExerciseFrequency
      enum:
        - Rarely or never
        - 1 or 2 times per week
        - 3 to 5 times per week
        - 6 to 7 times per week
      type: string
      description: Flex exercise frequency
      example: Rarely or never
      x-enum-elements:
        - name: Enum_Rarely or never
          description: ''
        - name: Enum_1 or 2 times per week
          description: ''
        - name: Enum_3 to 5 times per week
          description: ''
        - name: Enum_6 to 7 times per week
          description: ''
    PhysicalActivityReasonBeingActiveHealth:
      title: PhysicalActivityReasonBeingActiveHealth
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Active health goals
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityReasonBeingActiveLook:
      title: PhysicalActivityReasonBeingActiveLook
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Active look goals
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityReasonBeingActiveStress:
      title: PhysicalActivityReasonBeingActiveStress
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Active stress goals
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityReasonBeingActiveSocial:
      title: PhysicalActivityReasonBeingActiveSocial
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Active social goals
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityReasonBeingActiveNone:
      title: PhysicalActivityReasonBeingActiveNone
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: No active goals
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeAerobics:
      title: PhysicalActivityTypeAerobics
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Aerobics
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeJogging:
      title: PhysicalActivityTypeJogging
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Jogging
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeSwimmingWater:
      title: PhysicalActivityTypeSwimmingWater
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Swimming
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeWeightTraining:
      title: PhysicalActivityTypeWeightTraining
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Weight training
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeCycling:
      title: PhysicalActivityTypeCycling
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Cycling
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeSkating:
      title: PhysicalActivityTypeSkating
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Skating
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeRunningWalking:
      title: PhysicalActivityTypeRunningWalking
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Running
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeBallRacquetSports:
      title: PhysicalActivityTypeBallRacquetSports
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Racquet sports
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeYoga:
      title: PhysicalActivityTypeYoga
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Yoga
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypePilates:
      title: PhysicalActivityTypePilates
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Pilates
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeMartialArts:
      title: PhysicalActivityTypeMartialArts
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Martial arts
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeHomeExercises:
      title: PhysicalActivityTypeHomeExercises
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Home exercise
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeDancingGymnastics:
      title: PhysicalActivityTypeDancingGymnastics
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Gymnastics
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeFitnessClasses:
      title: PhysicalActivityTypeFitnessClasses
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Fitness class
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityTypeOther:
      title: PhysicalActivityTypeOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Other active exercises
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    PhysicalActivityExerciseCompany:
      title: PhysicalActivityExerciseCompany
      enum:
        - Alone
        - WithPartner
        - FewPeople
        - Group
      type: string
      description: Company during exercise
      example: Alone
      x-enum-elements:
        - name: Alone
          description: ''
        - name: WithPartner
          description: ''
        - name: FewPeople
          description: ''
        - name: Group
          description: ''
    PhysicalActivityExerciseLocation:
      title: PhysicalActivityExerciseLocation
      enum:
        - Home
        - ClubCommunityCentre
        - Outdoors
      type: string
      description: Exercise location
      example: Home
      x-enum-elements:
        - name: Home
          description: ''
        - name: ClubCommunityCentre
          description: ''
        - name: Outdoors
          description: ''
    PhysicalActivityExerciseTracking:
      title: PhysicalActivityExerciseTracking
      enum:
        - Fitbit
        - Garmin
        - Polar
        - Miband
        - Misfit
        - Jawbone
        - OtherFitnessDevice
        - Mobile
        - OtherMethod
        - DoNotTrack
      type: string
      description: Exercise tracking
      example: Fitbit
      x-enum-elements:
        - name: Fitbit
          description: ''
        - name: Garmin
          description: ''
        - name: Polar
          description: ''
        - name: Miband
          description: ''
        - name: Misfit
          description: ''
        - name: Jawbone
          description: ''
        - name: OtherFitnessDevice
          description: ''
        - name: Mobile
          description: ''
        - name: OtherMethod
          description: ''
        - name: DoNotTrack
          description: ''
    VitalityMember:
      title: VitalityMember
      type: object
      properties:
        friendId:
          type: integer
          description: User Id of the  searched member within the group
          format: int64
        membershipNo:
          type: string
          description: Vitality membership No of the user.
        membershipStatus:
          description: Vitality membership status
          $ref: '#/components/schemas/MembershipStatus'
        firstName:
          type: string
          description: First name of the searched member in the group.
        lastName:
          type: string
          description: Last name of the searched member in the group.
        fullName:
          type: string
          description: Last name of the searched member in the group.
        email:
          type: string
          description: Email of the searched member in the group.
        profileImage:
          type: string
          description: Image url of the searched member in the group.
        pointsSummary:
          $ref: '#/components/schemas/PointsSummary'
        friendStatus:
          description: Gives you status of the searched member in the group. .
          $ref: '#/components/schemas/FriendStatus'
    MembershipStatus:
      title: MembershipStatus
      enum:
        - Bronze
        - Silver
        - Gold
        - Platinum
      type: string
      description: Vitality membership status
      example: Bronze
      x-enum-elements:
        - name: Bronze
          description: ''
        - name: Silver
          description: ''
        - name: Gold
          description: ''
        - name: Platinum
          description: ''
    PointsSummary:
      title: PointsSummary
      type: object
      properties:
        pointsThisWeek:
          type: integer
          description: Points achieved this week.
          format: int64
        pointsThisMonth:
          type: integer
          description: Points achieved this month.
          format: int64
        totalPoints:
          type: integer
          description: Total points earned by the user.
          format: int64
        pointsWeeklyChallenges:
          type: string
          description: This is the current points achieved
        pointsToWeeklyChallenges:
          type: integer
          description: This is the total target for weekly challenges
          format: int64
        pointsToChallenges:
          type: integer
          description: These are goals point.
          format: int64
        pointsToNextStatus:
          type: integer
          description: Points to achieve next status
          format: int64
    FriendStatus:
      title: FriendStatus
      enum:
        - 0("not-friend")
        - 1("pending")
        - 2("friend")
        - 3("waiting")
      type: string
      description: Gives you status of the searched member in the group. .
      example: 0("not-friend")
      x-enum-elements:
        - name: Enum_0("not-friend")
          description: ''
        - name: Enum_1("pending")
          description: ''
        - name: Enum_2("friend")
          description: ''
        - name: Enum_3("waiting")
          description: ''
    Friends:
      title: Friends
      type: object
      properties:
        friendId:
          type: integer
          description: User Id of the  searched member within the group
          format: int64
        membershipNo:
          type: string
          description: Vitality membership No of the user.
        membershipStatus:
          description: Vitality membership status
          $ref: '#/components/schemas/MembershipStatus'
        firstName:
          type: string
          description: First name of the searched member in the group.
        lastName:
          type: string
          description: Last name of the searched member in the group.
        fullName:
          type: string
          description: Full name of the searched member in the group.
        email:
          type: string
          description: Email of the searched member in the group.
        profileImage:
          type: string
          description: Image url of the searched member in the group.
        pointsSummary:
          $ref: '#/components/schemas/PointsSummary'
    Friends87:
      title: Friends87
      type: object
      properties:
        friend-id:
          type: string
          description: User Id of friend
        action:
          type: string
          description: action to be performed on user id
    Group:
      title: Group
      type: object
      properties:
        groupId:
          type: string
          description: Unique identifier of the group where user is a part of.
        groupName:
          type: string
          description: Group name where user is a part of.
        groupStatus:
          type: string
          description: Status of the group i.e. how much  has the group achieved .
        groupImage:
          type: string
          description: Image of the group where user is a part of.
        groupPointsTarget:
          type: string
          description: .
        groupPointsAchieved:
          type: string
          description: Provides how much points group has achieved.
        groupParticipantsAllowed:
          type: string
          description: Max members in group.
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
          description: ''
    Member:
      title: Member
      type: object
      properties:
        friendId:
          type: string
          description: Unique identifier of the friend in the group..
        membershipNo:
          type: string
          description: Membership no of the user.
        membershipStatus:
          description: Vitality membership status
          $ref: '#/components/schemas/MembershipStatus'
        firstName:
          type: string
          description: First name of the member in the group.
        lastName:
          type: string
          description: Last name of the member in the group.
        fullName:
          type: string
          description: Full name of the member in the group.
        email:
          type: string
          description: Email of the  member in the group.
        profileImage:
          type: string
          description: Image url of the member in the group.
        pointsSummary:
          $ref: '#/components/schemas/PointsSummary'
        participantStatus:
          type: string
        groupRole:
          type: string
          description: 'Defines if a user can delete the member from group. Eg:- Where role is owner, member cannot delete self but delete group instead.'
    GroupRequest:
      title: GroupRequest
      type: object
      properties:
        requestStatus:
          type: string
          description: Describes request status.
        friendGroupId:
          type: integer
          description: User Id of the group requester.
          format: int64
        friendGroupName:
          type: string
          description: Group name of group requester.
        profileImage:
          type: string
          description: Image url of the group requester.
    MentalHealthPsychHappinessInPastMonth:
      title: MentalHealthPsychHappinessInPastMonth
      enum:
        - VeryHappy
        - MostlyHappy
        - NeitherHappyNorUnhappy
        - MostlyUnhappy
        - VeryUnhappy
      type: string
      description: Mental Happiness
      example: VeryHappy
      x-enum-elements:
        - name: VeryHappy
          description: ''
        - name: MostlyHappy
          description: ''
        - name: NeitherHappyNorUnhappy
          description: ''
        - name: MostlyUnhappy
          description: ''
        - name: VeryUnhappy
          description: ''
    StressKesslerStressDepressed:
      title: StressKesslerStressDepressed
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress depressed
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressEffort:
      title: StressKesslerStressEffort
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress effort
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressHopeless:
      title: StressKesslerStressHopeless
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress hopeless
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressNervous:
      title: StressKesslerStressNervous
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress nervous
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressRestless:
      title: StressKesslerStressRestless
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress restless
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressSad:
      title: StressKesslerStressSad
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress sad
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressTired:
      title: StressKesslerStressTired
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress tired
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressVeryNervous:
      title: StressKesslerStressVeryNervous
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress very nervous
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressVeryRestless:
      title: StressKesslerStressVeryRestless
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress very restless
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    StressKesslerStressWorthless:
      title: StressKesslerStressWorthless
      enum:
        - AllOfTheTime
        - MostOfTheTime
        - SomeOfTheTime
        - LittleOfTheTime
        - NoneOfTheTime
      type: string
      description: Stress worthless
      example: AllOfTheTime
      x-enum-elements:
        - name: AllOfTheTime
          description: ''
        - name: MostOfTheTime
          description: ''
        - name: SomeOfTheTime
          description: ''
        - name: LittleOfTheTime
          description: ''
        - name: NoneOfTheTime
          description: ''
    LifestyleSleeplessnessInLastFourWeeks:
      title: LifestyleSleeplessnessInLastFourWeeks
      enum:
        - Never
        - Rarely
        - Occasionally
        - Frequently
        - Always
      type: string
      description: Sleeplessness in last month
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Frequently
          description: ''
        - name: Always
          description: ''
    MentalHealthStressAtWork:
      title: MentalHealthStressAtWork
      enum:
        - HardlyAnyProblemsOrConcerns
        - SmallProblemsOrConcernsNotSerious
        - ModeratelySeriousProblemsOrConcerns
        - SeriousProblemsOrConcerns
        - ExtremelySeriousProblemsOrConcerns
      type: string
      description: Stress at work
      example: HardlyAnyProblemsOrConcerns
      x-enum-elements:
        - name: HardlyAnyProblemsOrConcerns
          description: ''
        - name: SmallProblemsOrConcernsNotSerious
          description: ''
        - name: ModeratelySeriousProblemsOrConcerns
          description: ''
        - name: SeriousProblemsOrConcerns
          description: ''
        - name: ExtremelySeriousProblemsOrConcerns
          description: ''
    MentalHealthStressWithinFamilyRelationship:
      title: MentalHealthStressWithinFamilyRelationship
      enum:
        - ExtremelySeriousProblemsOrConcerns
        - SeriousProblemsOrConcerns
        - ModeratelySeriousProblemsOrConcerns
        - SmallProblemsOrConcernsNotSerious
        - HardlyAnyProblemsOrConcerns
      type: string
      description: Stress due to  realtions
      example: ExtremelySeriousProblemsOrConcerns
      x-enum-elements:
        - name: ExtremelySeriousProblemsOrConcerns
          description: ''
        - name: SeriousProblemsOrConcerns
          description: ''
        - name: ModeratelySeriousProblemsOrConcerns
          description: ''
        - name: SmallProblemsOrConcernsNotSerious
          description: ''
        - name: HardlyAnyProblemsOrConcerns
          description: ''
    MentalHealthStressFamilyMemberDiedMe:
      title: MentalHealthStressFamilyMemberDiedMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to family loss
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressFamilyMemberDiedOther:
      title: MentalHealthStressFamilyMemberDiedOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to family loss others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressCloseFriendDiedMe:
      title: MentalHealthStressCloseFriendDiedMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to friends loss
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressCloseFriendDiedOther:
      title: MentalHealthStressCloseFriendDiedOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to friends loss others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressSeriousCarAccidentMe:
      title: MentalHealthStressSeriousCarAccidentMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to car accident
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressSeriousCarAccidentOther:
      title: MentalHealthStressSeriousCarAccidentOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to car accident others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressLifeThreateningDisasterMe:
      title: MentalHealthStressLifeThreateningDisasterMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to life threaning disaster
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressLifeThreateningDisasterOther:
      title: MentalHealthStressLifeThreateningDisasterOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to life threaning disaster others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressViolentCrimeVictimMe:
      title: MentalHealthStressViolentCrimeVictimMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to violent crime
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressViolentCrimeVictimOther:
      title: MentalHealthStressViolentCrimeVictimOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to violent crime others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressOtherSeriousEventMe:
      title: MentalHealthStressOtherSeriousEventMe
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to serious event
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthStressOtherSeriousEventOther:
      title: MentalHealthStressOtherSeriousEventOther
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress due to serious event others
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthSupportFamilyGivesEmotionalSupport:
      title: MentalHealthSupportFamilyGivesEmotionalSupport
      enum:
        - StronglyDisagree
        - Disagree
        - Neutral
        - Agree
        - StronglyAgree
      type: string
      description: Family support
      example: StronglyDisagree
      x-enum-elements:
        - name: StronglyDisagree
          description: ''
        - name: Disagree
          description: ''
        - name: Neutral
          description: ''
        - name: Agree
          description: ''
        - name: StronglyAgree
          description: ''
    MentalHealthSupportCanCountOnFriends:
      title: MentalHealthSupportCanCountOnFriends
      enum:
        - StronglyDisagree
        - Disagree
        - Neutral
        - Agree
        - StronglyAgree
      type: string
      description: Friends support
      example: StronglyDisagree
      x-enum-elements:
        - name: StronglyDisagree
          description: ''
        - name: Disagree
          description: ''
        - name: Neutral
          description: ''
        - name: Agree
          description: ''
        - name: StronglyAgree
          description: ''
    MentalHealthSupportSpecialPersonInNeed:
      title: MentalHealthSupportSpecialPersonInNeed
      enum:
        - StronglyDisagree
        - Disagree
        - Neutral
        - Agree
        - StronglyAgree
      type: string
      description: Support for person in ndeed
      example: StronglyDisagree
      x-enum-elements:
        - name: StronglyDisagree
          description: ''
        - name: Disagree
          description: ''
        - name: Neutral
          description: ''
        - name: Agree
          description: ''
        - name: StronglyAgree
          description: ''
    MentalHealthStressStatus:
      title: MentalHealthStressStatus
      enum:
        - Coping
        - NeedImprovementButNotChanging
        - WantToImproveNeedHelp
      type: string
      description: Health stress status
      example: Coping
      x-enum-elements:
        - name: Coping
          description: ''
        - name: NeedImprovementButNotChanging
          description: ''
        - name: WantToImproveNeedHelp
          description: ''
    Assessment:
      title: Assessment
      type: object
      properties:
        assessmentId:
          type: integer
          description: Assessment Id.
          format: int64
        assessmentType:
          type: string
          description: 'Types of the assessment e.g. Improve your health, Reduce stress etc.'
        assessmentDesc:
          type: string
          description: Assessment description.
        completionDate:
          type: string
          description: Date for which assessment has been completed.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute128'
          description: ''
        effectiveFromDate:
          type: string
          description: Starting date of assessment.
        effectiveToDate:
          type: string
          description: End date of assessment.
    Attribute128:
      title: Attribute128
      type: object
      properties:
        attributeId:
          type: string
          description: Attribute id e.g. RiskSmokingTargetRelativeRisk .
        attributeType:
          type: string
          description: Types of attribue e.g. MentalWellbeingPshychological.
        attributeValue:
          type: string
          description: The attribute value which has been used in VHR or VHC
        assessmentDate:
          type: string
          description: Date on which assessment has been taken.
        assessmentSourceType:
          type: string
          description: Whether the assessment has been taken from trusted or untrusted site
    MemberChallenge130:
      title: MemberChallenge130
      type: object
      properties:
        challengeId:
          type: string
          description: Identifier of the goal
        challengeName:
          type: string
          description: Name of the goal/ challenge
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType131'
        metric:
          type: string
          description: Unit of measurement
        riskCategory:
          type: string
          description: Assessment  categories e.g. improve your health.
        riskFactor:
          $ref: '#/components/schemas/RiskFactor23'
        challengeEffectiveFrom:
          type: string
          description: Start date of the challenge to be accepted by the member
        challengeEffectiveTo:
          type: string
          description: End date of the challenge to be completed by the member
        eventId:
          type: string
        awardType:
          type: string
          description: Gives you points earned by the member.
        awardDesc:
          type: string
          description: Points earned by completing which assessment.
        challengeStatus:
          description: Status in which current goal is
          $ref: '#/components/schemas/ChallengeStatus'
        challengeStatusFromDate:
          type: string
          description: start date for the challenge status
        challengeStatusToDate:
          type: string
          description: End date for the challenge status
        recommendation:
          $ref: '#/components/schemas/Recommendation'
        progessDetails:
          $ref: '#/components/schemas/ProgessDetails'
    ChallengeType131:
      title: ChallengeType131
      enum:
        - Weekly
        - Group
        - Member Challenge
      type: string
      description: Types of challenges
      example: Weekly
      x-enum-elements:
        - name: Weekly
          description: ''
        - name: Group
          description: ''
        - name: Enum_Member Challenge
          description: ''
    BankList:
      title: BankList
      type: object
      properties:
        bankId:
          type: string
          description: Unique identifier of Bank.            .
        bankName:
          type: string
          description: Name of bank.
        branchCode:
          type: string
          description: Branch code of the bank.
        branchName:
          type: string
        overseasBank:
          type: string
          description: 'Only applicable to HK market as there are two categories of banks in HK , Internation and Overseas.'
        swiftCode:
          type: string
          description: Swift code of the bank to identify particular bank worldwide.
    Bank:
      title: Bank
      type: object
      properties:
        bankId:
          type: string
          description: Unique identifier of Bank.            .
        bankName:
          type: string
          description: Bank name where user is having an account.
        branchCode:
          type: string
          description: Branch code of the bank where user is holding an account..
        branchName:
          type: string
          description: Branch name of the bank where user is holding an account.
        accountNumber:
          type: string
          description: Bank account number of the user.
        accountType:
          description: Types of account.
          $ref: '#/components/schemas/AccountType'
        accountHolderName:
          type: string
          description: Holder name of the account.
        countryCode:
          type: string
          description: Country code of the bank where user is having an account.
        overseasBank:
          type: string
          description: 'Only applicable to HK market as there are two categories of banks in HK , Internation and Overseas.'
        swiftCode:
          type: string
          description: Swift code of the bank to identify particular bank worldwide.
    AccountType:
      title: AccountType
      enum:
        - Saving Account
        - Current Account
      type: string
      description: Types of account.
      example: Saving Account
      x-enum-elements:
        - name: Enum_Saving Account
          description: ''
        - name: Enum_Current Account
          description: ''
    Payment:
      title: Payment
      type: object
      properties:
        paymentDueDate:
          type: string
          description: Expiry date of the payment.
        paymentMethod:
          type: string
          description: Mode of payment e.g. Cashback  or Voucher
        paymentAmount:
          type: string
          description: Amount to be paid by the user.
        paymentDate:
          type: string
          description: Date on which payment has been done .
        paymentReference:
          type: string
          description: Unique reference Id of the payment.
    Banks:
      title: Banks
      type: object
      properties:
        bankId:
          type: string
          description: Unique identifier of Bank.            .
        bankName:
          type: string
          description: Bank name where user is having an account.
        branchCode:
          type: string
          description: Branch code of the bank where user is holding an account..
        branchName:
          type: string
          description: Branch name of the bank where user is holding an account.
        accountNumber:
          type: string
          description: Bank account number of the user.
        accountType:
          description: Types of account.
          $ref: '#/components/schemas/AccountType'
        accountHolderName:
          type: string
          description: Holder name of the account.
        countryCode:
          type: string
          description: Country code of the bank where user is having an account.
        overseasBank:
          type: string
          description: 'Only applicable to HK market as there are two categories of banks in HK , Internation and Overseas.'
        swiftCode:
          type: string
          description: Swift code of the bank to identify particular bank worldwide.
    RewardsCategory:
      title: RewardsCategory
      type: object
      properties:
        categoryId:
          type: string
          description: The identifier of  the reward
        categoryType:
          type: string
        categoryDesc:
          type: string
          description: Desription of the reward avaialbe to the user e.g. how many vouchers the member is eligible for  etc.
        expiryDate:
          type: string
          description: The date on which the reward will be expired.
        rewardsStartDate:
          type: string
          description: Date on which reward has been allocated
        rewardsEndDate:
          type: string
        rewardsSelection:
          type: array
          items:
            $ref: '#/components/schemas/RewardsSelection'
          description: ''
    RewardsSelection:
      title: RewardsSelection
      type: object
      properties:
        rewardId:
          type: string
          description: Identifier used to identify reward
        rewardType:
          description: Various types of rewards available in the system
          $ref: '#/components/schemas/RewardType'
        rewardDesc:
          type: string
          description: Description of the reward
        rewardValue:
          type: string
          description: 'Value of the reward. i.e. 5$ voucher,10% cashback etc.'
        rewardMetric:
          type: string
          description: Unit used to specify reward value
        skuNo:
          type: string
          description: Stock keeping unit is used to identify the member purchased items .
        donateOption:
          type: string
          description: When a member donate the rewards to other member ( friend )
        taggedStatus:
          type: string
          description: Redeemed status of the reward
        rewardExpiryDate:
          type: string
          description: The date on which the selected reward will expire
    RewardType:
      title: RewardType
      enum:
        - Cashback
        - '% discount'
        - Voucher
      type: string
      description: Various types of rewards available in the system
      example: Cashback
      x-enum-elements:
        - name: Cashback
          description: ''
        - name: Enum_% discount
          description: ''
        - name: Voucher
          description: ''
    MemberDetails:
      title: MemberDetails
      type: object
      properties:
        title:
          type: string
          description: Salutation used for the member.
        firstName:
          type: string
          description: First Name of the member.
        lastName:
          type: string
          description: Last Name of the member.
        fullName:
          type: string
          description: Full Name of the member.
        initial:
          type: string
          description: Initial used for the member name.
        dateOfBirth:
          type: string
          description: Vitality member date of birth.
        gender:
          type: string
          description: Vitality member gender.
        docId:
          $ref: '#/components/schemas/DocId'
    DocId:
      title: DocId
      type: object
      properties:
        docIdType:
          type: string
          description: Types of document Identifier .
        docIdNo:
          type: string
          description: Document identifier Number.
    Address:
      title: Address
      type: object
      properties:
        addressType:
          description: Various types of member address details  .
          $ref: '#/components/schemas/AddressType'
        addressLine1:
          type: string
          description: Member address line1 details .
        addressLine2:
          type: string
          description: Member address line2 details .
        addressLine3:
          type: string
          description: Member address line3 details.
        suburb:
          type: string
          description: Suburb of the member address.
        city:
          type: string
          description: City name of the member.
        code:
          type: string
          description: Pincode of the member address.
    AddressType:
      title: AddressType
      enum:
        - Home
        - Office
      type: string
      description: Various types of member address details  .
      example: Home
      x-enum-elements:
        - name: Home
          description: ''
        - name: Office
          description: ''
    Email:
      title: Email
      type: object
      properties:
        emailType:
          description: Types of member email
          $ref: '#/components/schemas/EmailType'
        emailId:
          type: string
          description: Email Id of the member.
    EmailType:
      title: EmailType
      enum:
        - General
        - Professional
      type: string
      description: Types of member email
      example: General
      x-enum-elements:
        - name: General
          description: ''
        - name: Professional
          description: ''
    Telephone:
      title: Telephone
      type: object
      properties:
        telNoType:
          type: string
          description: Types of telephone no a member is having e.g. mobile
        telDialCode:
          type: string
          description: Telephone dial code of the member .
        telNo:
          type: string
          description: Telephone no. of the member .
    MemberProfileImage:
      title: MemberProfileImage
      type: object
      properties:
        profileImage:
          type: string
          description: Image url of the member.
    MemberOptOutSeacrh:
      title: MemberOptOutSeacrh
      type: object
      properties:
        isOptOutSearch:
          type: string
          description: Is opt out seacrh of the member.
    Membership:
      title: Membership
      type: object
      properties:
        vitalityMembershipNo:
          type: string
          description: User vitality membership-number
        membershipType:
          type: string
          description: Membership type e.g. NRI.
        region:
          type: string
          description: Country Name
        currentVitalityStatus:
          description: Vitality status of the member in the current policy year.
          $ref: '#/components/schemas/CurrentVitalityStatus'
        vitalityStatusChangeDate:
          type: string
          description: The date on which vitality status has been changed.
        nextVitalityStatus:
          type: string
          description: Status for the next vitality
        benefitStatus:
          type: string
          description: Benefit status of the member
        benefitExpiryDate:
          type: string
          description: Benefits expiry date
        membershipStartDate:
          type: string
          description: Membership start date
        membershipEndDate:
          type: string
          description: Membership end date
        membershipStatus:
          type: string
          description: 'Vitality membership status e.g. Active , Inactive etc.'
        eCardNo:
          type: string
          description: Vitality card number of the member.
    CurrentVitalityStatus:
      title: CurrentVitalityStatus
      enum:
        - Gold
        - Silver
        - Bronze
        - Platinum
      type: string
      description: Vitality status of the member in the current policy year.
      example: Gold
      x-enum-elements:
        - name: Gold
          description: ''
        - name: Silver
          description: ''
        - name: Bronze
          description: ''
        - name: Platinum
          description: ''
    Members:
      title: Members
      type: object
      properties:
        principleMember:
          $ref: '#/components/schemas/PrincipleMember'
        familyMembers:
          type: string
          description: Family member details  of the member.
    PrincipleMember:
      title: PrincipleMember
      type: object
      properties:
        firstName:
          type: string
          description: First name of the pending friend.
        lastName:
          type: string
          description: Last name of the pending friend.
        fullName:
          type: string
          description: Full Name of the  vitality member
        memberRole:
          type: array
          items:
            $ref: '#/components/schemas/MemberRole'
          description: ''
    MemberRole:
      title: MemberRole
      type: object
      properties:
        type:
          description: Roles of the member
          $ref: '#/components/schemas/Type'
        status:
          type: string
          description: vitality status of the member
        roleStartDate:
          type: string
          description: Date on which member has been enrolled.
    Type:
      title: Type
      enum:
        - PP - Principal Party
        - VPH - Vitality Policy Holder
        - IPV - Insured Party - Vitality
      type: string
      description: Roles of the member
      example: PP - Principal Party
      x-enum-elements:
        - name: Enum_PP - Principal Party
          description: ''
        - name: Enum_VPH - Vitality Policy Holder
          description: ''
        - name: Enum_IPV - Insured Party - Vitality
          description: ''
    Notification:
      title: Notification
      type: object
      properties:
        notificationId:
          type: string
          description: Unique identifier of the notification.
        notificationType:
          type: string
          description: .
        notificationDesc:
          type: string
          description: Describes notification details.
        notificationDate:
          type: string
          description: Date on which notificatfication has been recieved by the user
        notificationImage:
          type: string
          description: Image for notification.
        message:
          type: string
          description: Message recieved by the user.
        readStatus:
          type: string
          description: Describes read status for the notification whether it is read or not.
        actionURL:
          type: string
          description: URL for the notification .
    DeviceDetails:
      title: DeviceDetails
      type: object
      properties:
        appId:
          type: string
          description: Describes which Vitality app the member is using.
        deviceId:
          type: string
          description: Unique identifier of mobile device member is using for Vitality.
        pushToken:
          type: string
          description: Push notification token of device member is using for Vitality.
        language:
          type: string
          description: Locale of language member is using for Vitality.
    NutritionAddSaltBeforeTasting:
      title: NutritionAddSaltBeforeTasting
      enum:
        - Pinch
        - HalfTeaspoon
        - LevelTeaspoon
        - HeapedTeaspoon
        - LevelDessertSpoon
        - HeapedDessertSpoon
      type: string
      description: Salt intake
      example: Pinch
      x-enum-elements:
        - name: Pinch
          description: ''
        - name: HalfTeaspoon
          description: ''
        - name: LevelTeaspoon
          description: ''
        - name: HeapedTeaspoon
          description: ''
        - name: LevelDessertSpoon
          description: ''
        - name: HeapedDessertSpoon
          description: ''
    NutritionSaltyFoodConsumption:
      title: NutritionSaltyFoodConsumption
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
        - Always
      type: string
      description: Salty food intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
        - name: Always
          description: ''
    NutritionIntakeDairyConsumptionLowFatOrFatFree:
      title: NutritionIntakeDairyConsumptionLowFatOrFatFree
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
        - Always
        - DoNotConsumeDairy
      type: string
      description: Low fat or fat free dairy intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
        - name: Always
          description: ''
        - name: DoNotConsumeDairy
          description: ''
    NutritionIntakeFrequencyAddFatAfterCooking:
      title: NutritionIntakeFrequencyAddFatAfterCooking
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
        - Always
      type: string
      description: Fat addition to cooked food
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
        - name: Always
          description: ''
    NutritionIntakeMeatConsumptionLean:
      title: NutritionIntakeMeatConsumptionLean
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
        - Always
        - DoNotEatMeat
      type: string
      description: Lean meat intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
        - name: Always
          description: ''
        - name: DoNotEatMeat
          description: ''
    NutritionEatBreakfast:
      title: NutritionEatBreakfast
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
      type: string
      description: Breakfast intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
    NutritionEatLunch:
      title: NutritionEatLunch
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
      type: string
      description: Lunch intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
    NutritionEatDinner:
      title: NutritionEatDinner
      enum:
        - Never
        - Rarely
        - Occasionally
        - Usually
        - Frequently
      type: string
      description: Dinner intake
      example: Never
      x-enum-elements:
        - name: Never
          description: ''
        - name: Rarely
          description: ''
        - name: Occasionally
          description: ''
        - name: Usually
          description: ''
        - name: Frequently
          description: ''
    NutritionEatSnacks:
      title: NutritionEatSnacks
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Snack intake per day
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    NutritionWhenSnacking:
      title: NutritionWhenSnacking
      enum:
        - Morning
        - Afternoon
        - Night
      type: string
      description: Snacking time
      example: Morning
      x-enum-elements:
        - name: Morning
          description: ''
        - name: Afternoon
          description: ''
        - name: Night
          description: ''
    NutritionEatJunkFood:
      title: NutritionEatJunkFood
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Junk food intake
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    NutritionHighFatMeatChoice:
      title: NutritionHighFatMeatChoice
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Fatty meat intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionEatSaltyFood:
      title: NutritionEatSaltyFood
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Salty food intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionFattyFishMoreThan2PerWeek:
      title: NutritionFattyFishMoreThan2PerWeek
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Fish intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionAddButter:
      title: NutritionAddButter
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Butter intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionAddGoodOil:
      title: NutritionAddGoodOil
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Oil intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionRegularDressing:
      title: NutritionRegularDressing
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Dressing intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionAddSalt:
      title: NutritionAddSalt
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Salt addition
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionEatSweetFoods:
      title: NutritionEatSweetFoods
      enum:
        - UsuallyOften
        - Sometimes
        - RarelyNever
        - NotApplicable
      type: string
      description: Sweets intake
      example: UsuallyOften
      x-enum-elements:
        - name: UsuallyOften
          description: ''
        - name: Sometimes
          description: ''
        - name: RarelyNever
          description: ''
        - name: NotApplicable
          description: ''
    NutritionEatingHabitPerception:
      title: NutritionEatingHabitPerception
      enum:
        - Happy
        - NeedImprovementButNotChanging
        - NeedsImprovementNeedHelp
      type: string
      description: Perception of eating habit
      example: Happy
      x-enum-elements:
        - name: Happy
          description: ''
        - name: NeedImprovementButNotChanging
          description: ''
        - name: NeedsImprovementNeedHelp
          description: ''
    PartnerType:
      title: PartnerType
      enum:
        - cashback
        - voucher
        - discount
      type: string
      description: Retrieves various types of partners.
      example: cashback
      x-enum-elements:
        - name: cashback
          description: ''
        - name: voucher
          description: ''
        - name: discount
          description: ''
    PartnerBenefit:
      title: PartnerBenefit
      type: object
      properties:
        benefitId:
          type: string
          description: Identifier of the the benefit.
        benefitType:
          type: string
          description: 'Type of benefit e.g. USAGE,SPEND.'
        benefitDesc:
          type: string
          description: Detailed desciption of the benefit .
        benefitComponent:
          type: array
          items:
            $ref: '#/components/schemas/BenefitComponent'
          description: ''
        partnerBranchId:
          type: string
          description: The branch of the partner where the benefits can be used.
    BenefitComponent:
      title: BenefitComponent
      type: object
      properties:
        benefitofferName:
          type: string
          description: The offer given the the user for the sepecific benefit.
        benefitComponentId:
          type: string
          description: The component id of the benefit. It is configured in the system.
        benefitComponentType:
          type: string
          description: Type of benefit component.
        benefitComponentDesc:
          type: string
          description: Detailed description of the benefit component.
        benefitComponentValue:
          type: string
          description: Value of the offer given to the member.
        benefitStartDate:
          type: string
          description: Date from which User can utilize the benefit provided .
        benefitEndDate:
          type: string
          description: Date upto which User can utilize the benefit provided .
    PartnerReward:
      title: PartnerReward
      type: object
      properties:
        benefitComponentId:
          type: string
          description: 'Unique component Id associated with each rewards , this one is configured in core engine .'
        rewardId:
          type: string
          description: 'Unique identification used for each rewards , this one is configured in L&R system.'
        rewardType:
          type: string
          description: Various type  of rewards available e.g. benefits.
        rewardDesc:
          type: string
          description: Description of reward.
        rewardMetric:
          type: string
          description: Unit of measurement for reward.
        rewardCurrency:
          type: string
          description: 'Currency used for rewards  e.g. INR , Dollar.'
    PartnerList:
      title: PartnerList
      type: object
      properties:
        partnerId:
          type: string
          description: The unique identification of partner.
        partnerDesc:
          type: string
          description: Name of partner.
        partnerType:
          description: Retrieves various types of partners.
          $ref: '#/components/schemas/PartnerType'
        partnerRewardId:
          type: string
          description: This attribute provides partner reward Id.
    PartnerBranchList:
      title: PartnerBranchList
      type: object
      properties:
        partnerBranchId:
          type: string
          description: The unique identification of partner branch.
        partnerBranchName:
          type: string
          description: Name of partner branch.
    PartnerReward212:
      title: PartnerReward212
      type: object
      properties:
        offerDetails:
          $ref: '#/components/schemas/OfferDetails'
        eligibility:
          $ref: '#/components/schemas/Eligibility'
        rewardDesc:
          $ref: '#/components/schemas/RewardDesc'
    OfferDetails:
      title: OfferDetails
      type: object
      properties:
        rewardsId:
          type: string
          description: Id of the partner benefit offer.
        limit:
          $ref: '#/components/schemas/Limit'
        rewardIndicator:
          type: string
          description: Reward calculation indicator.
        startDate:
          type: string
          description: Start date of partner benefit eligibility.
        endDate:
          type: string
          description: End date of partner benefit eligibility.
    Limit:
      title: Limit
      type: object
      properties:
        limitAmt:
          type: string
          description: Limit amount of the partner benefit offer.
        limitType:
          type: string
          description: Type of the offer limit.
    Eligibility:
      title: Eligibility
      type: object
      properties:
        status:
          type: string
          description: Status of partner benefit eligiblity.
    RewardDesc:
      title: RewardDesc
      type: object
      properties:
        rewardValue:
          type: string
          description: Discount value of the partner benefit offer.
        rewardMetric:
          type: string
          description: Type of discount offer
    PendingFriend:
      title: PendingFriend
      type: object
      properties:
        requestStatus:
          description: Describes request status.
          $ref: '#/components/schemas/RequestStatus'
        friendId:
          type: integer
          description: User id of the pending friend .
          format: int64
        membeshipNo:
          type: string
          description: Vitality membership No of the user.
        membershipStatus:
          type: string
          description: 'Membership status of the user e.g. active , inactice etc.'
        firstName:
          type: string
          description: First name of the pending friend.
        lastName:
          type: string
          description: Last name of the pending friend.
        fullName:
          type: string
          description: Full name of the pending friend.
        email:
          type: string
          description: Email id  of the pending friend.
        profileImage:
          type: string
          description: Image url of the pending friend.
    RequestStatus:
      title: RequestStatus
      enum:
        - sent
        - recieved
      type: string
      description: Describes request status.
      example: sent
      x-enum-elements:
        - name: sent
          description: ''
        - name: recieved
          description: ''
    PointsConfiguration:
      title: PointsConfiguration
      type: object
      properties:
        category:
          type: string
          description: Assessment category.
        riskCategory:
          type: array
          items:
            $ref: '#/components/schemas/RiskCategory'
          description: ''
        categoryCap:
          type: string
          description: Maximum points of that particular assessment category.
    RiskCategory:
      title: RiskCategory
      type: object
      properties:
        activityId:
          type: string
          description: Assessment or challenge or other activity Id.
        activityType:
          type: string
          description: 'Assessment or challenge or other activity for which point has been awarded for the usere.g. VHR ,MWB etc.'
        activityDesc:
          type: string
          description: Assessment or challenge or other activity description.
        activitytPoints:
          type: string
          description: Points earned by the member after completing the particular Assessment or challenge or other activity.
    PointsPerDay:
      title: PointsPerDay
      type: object
      properties:
        awardedDate:
          type: string
          description: Date on which member has been awarded with point.
        points:
          type: integer
          description: Numerical value of the points earned by the member.
          format: int64
        assessmentType:
          type: string
          description: 'Type of the assessment i.e. Improve your health, Reduce stress , MWB etc.'
        assessmentDesc:
          type: string
          description: Assessment Description..
        challengeId:
          type: string
          description: Identifier of the goal.
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType131'
        activityId:
          type: string
          description: Identifier of the activity.
        activityType:
          type: string
          description: Types of other activity.
        riskCategory:
          type: string
          description: 'Assessment  categories e.g. reduce stress , improve your health etc.'
        feedback:
          $ref: '#/components/schemas/Feedback26'
    PointsPerDay229:
      title: PointsPerDay229
      type: object
      properties:
        awardedDate:
          type: string
          description: Date on which member has been awarded with point.
        points:
          type: integer
          description: Numerical value of the points earned by the member.
          format: int64
        feedbackId:
          type: string
          description: The identifier of the feedback why the goal is assigned.
        feedbackDesc:
          type: string
          description: Description of the feedback.
    PointsPerDay231:
      title: PointsPerDay231
      type: object
      properties:
        awardedDate:
          type: string
          description: Date on which member has been awarded with points.
        points:
          type: integer
          description: Points allocated to the member.
          format: int64
        assessmentType:
          type: string
          description: Assessments for which point has been awarded for the user e.g. mental wellbeing etc.
        assessmentDesc:
          type: string
          description: Assessment description.
        challengeId:
          type: string
          description: Identifier of the goal.
        challengeType:
          description: Types of challenges
          $ref: '#/components/schemas/ChallengeType131'
        activityId:
          type: string
          description: Identifier of the activity.
        activityType:
          type: string
          description: Types of other activity.
        riskCategory:
          type: string
          description: Category of the risk eg. improve your health.
        feedback:
          $ref: '#/components/schemas/Feedback233'
      description: Date wise points of the member.
    Feedback233:
      title: Feedback233
      type: object
      properties:
        feedbackId:
          type: string
          description: Field displaying whether points has been rejected or awarded
        feedbackDesc:
          type: string
          description: Reason for rejection or acceptance of points
    RewardConfiguration:
      title: RewardConfiguration
      type: object
      properties:
        rewardId:
          type: string
          description: Identifier used to identify reward
        rewardType:
          description: Various types of rewards available in the system
          $ref: '#/components/schemas/RewardType'
        rewardDesc:
          type: string
          description: Description of the reward
        rewardValue:
          type: string
          description: 'Value of the reward. i.e. 5$ voucher,10% cashback etc.'
        rewardMetric:
          type: string
          description: Unit used to specify reward value
        donateOption:
          type: string
          description: When a member donate the rewards to other member ( friend )
        rewardExpiryDate:
          type: string
          description: The date on which the selected reward will expire
    Reward:
      title: Reward
      type: object
      properties:
        rewardId:
          type: string
          description: Identifier used to identify reward
        couponId:
          type: string
          description: Identifier used to identify coupon
        rewardType:
          description: Various types of rewards available in the system
          $ref: '#/components/schemas/RewardType'
        rewardDesc:
          type: string
          description: Description of the reward
        rewardValue:
          type: string
          description: 'Value of the reward. i.e. 5$ voucher,10% cashback etc.'
        rewardMetric:
          type: string
          description: Unit used to specify reward value
        skuNo:
          type: string
          description: Stock keeping unit is used to identify the member purchased items .
        donateOption:
          type: string
          description: When a member donate the rewards to other member ( friend )
        taggedStatus:
          type: string
          description: Redeemed status of the reward.
        rewardIssueDate:
          type: string
          description: The date on which the reward has been issued.
        rewardExpiryDate:
          type: string
          description: The date on which the selected reward will expire.
        rewardState:
          type: string
          description: Status of the rewards if it has been used or not.
        balance:
          type: string
          description: Remaining value of the reward of a particluar partner type  .
        balanceDate:
          type: string
          description: Expiry Date of the balance of the reward.
        redeemCodeType:
          type: string
          description: Redeemption Type e.g.QR code barcode etc .
        redeemCode:
          type: string
          description: The code generated by the system using which the member can redeem the reward.
        redirectUrl:
          type: string
          description: Redirect URL to third party application for using a specific coupon (e.g. Grab)
    RewardsStatement:
      title: RewardsStatement
      type: object
      properties:
        value:
          type: string
          description: Value of reward
        issueDate:
          type: string
          description: The date on which the reward is issued to the member.
        redemption:
          type: string
          description: The date on which the reward is transfered to partner by the member.
        paymentExpiryDate:
          type: string
          description: The date on which the reward is used with partner by the member.
    AssessmentDetails:
      title: AssessmentDetails
      type: object
      properties:
        assessmentId:
          type: string
          description: Identifier of the assessment.
        assessmentType:
          type: string
          description: 'Type of the assessment i.e. Improve your health, Reduce stress etc.'
        partnerBranchId:
          type: string
          description: The branch of the partner where the benefits can be used.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute247'
          description: ''
        assessmentReports:
          $ref: '#/components/schemas/AssessmentReports'
    Attribute247:
      title: Attribute247
      type: object
      properties:
        attributeId:
          type: string
          description: The health attribute which is being affected for the goal
        attributeType:
          type: string
        attributeValue:
          type: string
          description: The value of the attribute provided in the assessment.
        assessmentDate:
          type: string
          description: The date on which the assessment has been taken by the member
        assessmentSourceType:
          type: string
          description: Whether the assessment is online(Untrusted) or done at partner site(Trusted).
    AssessmentReports:
      title: AssessmentReports
      type: object
      properties:
        assessmentReportFormat:
          type: string
          description: 'Various types of format a report can be e.g. pdf , txt etc.'
        assessmentReport:
          type: string
          description: Assessment report of the member.
    AssessmentDetails250:
      title: AssessmentDetails250
      type: object
      properties:
        assessmentId:
          type: string
          description: Identifier of the assessment.
        assessmentType:
          type: string
          description: 'Type of the assessment i.e. Improve your health, Reduce stress etc.'
    Threshold:
      title: Threshold
      type: object
      properties:
        order:
          description: Order of the status in the response.
          $ref: '#/components/schemas/Order'
        status:
          type: string
          description: Vitality status of the user
        upperLimit:
          type: integer
          description: Maximum points to cross next status
          format: int64
        lowerLimit:
          type: integer
          description: Minimum points to reach next status
          format: int64
    Order:
      title: Order
      enum:
        - 0 - 9999
        - 10000 - 19999
        - 20000 - 29999
        - 30000 - 39999
      type: string
      description: Order of the status in the response.
      example: 0 - 9999
      x-enum-elements:
        - name: Enum_0 - 9999
          description: ''
        - name: Enum_10000 - 19999
          description: ''
        - name: Enum_20000 - 29999
          description: ''
        - name: Enum_30000 - 39999
          description: ''
    LifestyleHealthAssessment:
      title: LifestyleHealthAssessment
      enum:
        - Excellent
        - VeryGood
        - Good
        - Fair
        - Poor
      type: string
      description: General health status
      example: Excellent
      x-enum-elements:
        - name: Excellent
          description: ''
        - name: VeryGood
          description: ''
        - name: Good
          description: ''
        - name: Fair
          description: ''
        - name: Poor
          description: ''
    LifestyleImproveExercise:
      title: LifestyleImproveExercise
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Excercise indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveEating:
      title: LifestyleImproveEating
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Eating indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveSleep:
      title: LifestyleImproveSleep
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Sleeping indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveStress:
      title: LifestyleImproveStress
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stress indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveFamily:
      title: LifestyleImproveFamily
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveFinance:
      title: LifestyleImproveFinance
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Finance indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleImproveWorkLifeBalance:
      title: LifestyleImproveWorkLifeBalance
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: WorkLifeBalance indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHeightMetric:
      title: MedicalHeightMetric
      enum:
        - FeetInches
        - Meters
        - Inches
        - Centimeters
      type: string
      description: Measurement
      example: FeetInches
      x-enum-elements:
        - name: FeetInches
          description: ''
        - name: Meters
          description: ''
        - name: Inches
          description: ''
        - name: Centimeters
          description: ''
    MedicalWeightMetric:
      title: MedicalWeightMetric
      enum:
        - Pounds
        - Kilograms
        - StonePounds
        - PoundOunces
      type: string
      description: Measurement
      example: Pounds
      x-enum-elements:
        - name: Pounds
          description: ''
        - name: Kilograms
          description: ''
        - name: StonePounds
          description: ''
        - name: PoundOunces
          description: ''
    MedicalWaistCircumferenceMetric:
      title: MedicalWaistCircumferenceMetric
      enum:
        - Inches
        - Centimeters
      type: string
      description: Measurement
      example: Inches
      x-enum-elements:
        - name: Inches
          description: ''
        - name: Centimeters
          description: ''
    MedicalWeightPerception:
      title: MedicalWeightPerception
      enum:
        - Happy
        - NoIntention
        - WantToLoseWeight
      type: string
      description: Weight perception
      example: Happy
      x-enum-elements:
        - name: Happy
          description: ''
        - name: NoIntention
          description: ''
        - name: WantToLoseWeight
          description: ''
    MedicalBloodPressureRange:
      title: MedicalBloodPressureRange
      enum:
        - High
        - Normal
        - Low
        - DontKnow
      type: string
      description: Blood Pressure range
      example: High
      x-enum-elements:
        - name: High
          description: ''
        - name: Normal
          description: ''
        - name: Low
          description: ''
        - name: DontKnow
          description: ''
    MedicalFastingGlucoseRange:
      title: MedicalFastingGlucoseRange
      enum:
        - High
        - Normal
        - Low
        - DontKnow
      type: string
      description: Glucose range
      example: High
      x-enum-elements:
        - name: High
          description: ''
        - name: Normal
          description: ''
        - name: Low
          description: ''
        - name: DontKnow
          description: ''
    MedicalFastingGlucoseMetric:
      title: MedicalFastingGlucoseMetric
      enum:
        - mmolL
        - mgDL
      type: string
      description: Glucose metric
      example: mmolL
      x-enum-elements:
        - name: mmolL
          description: ''
        - name: mgDL
          description: ''
    MedicalRandomGlucoseRange:
      title: MedicalRandomGlucoseRange
      enum:
        - High
        - Normal
        - Low
        - DontKnow
      type: string
      description: Glucose range
      example: High
      x-enum-elements:
        - name: High
          description: ''
        - name: Normal
          description: ''
        - name: Low
          description: ''
        - name: DontKnow
          description: ''
    MedicalRandomGlucoseMetric:
      title: MedicalRandomGlucoseMetric
      enum:
        - mmolL
        - mgDL
      type: string
      description: Glucose metric
      example: mmolL
      x-enum-elements:
        - name: mmolL
          description: ''
        - name: mgDL
          description: ''
    MedicalCholesterolRange:
      title: MedicalCholesterolRange
      enum:
        - High
        - Normal
        - Low
        - DontKnow
      type: string
      description: Cholesterol range
      example: High
      x-enum-elements:
        - name: High
          description: ''
        - name: Normal
          description: ''
        - name: Low
          description: ''
        - name: DontKnow
          description: ''
    MedicalTotalCholesterolMetric:
      title: MedicalTotalCholesterolMetric
      enum:
        - mmolL
        - mgDL
      type: string
      description: Cholesterol metric
      example: mmolL
      x-enum-elements:
        - name: mmolL
          description: ''
        - name: mgDL
          description: ''
    LifestyleSmokingStatus:
      title: LifestyleSmokingStatus
      enum:
        - NonSmoker
        - ExSmoker
        - Smoker
      type: string
      description: Smoking status
      example: NonSmoker
      x-enum-elements:
        - name: NonSmoker
          description: ''
        - name: ExSmoker
          description: ''
        - name: Smoker
          description: ''
    LifestyleSmokingECigarettes:
      title: LifestyleSmokingECigarettes
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: eSmoking indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    LifestyleAlcoholDrinker:
      title: LifestyleAlcoholDrinker
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Alcohol drinking indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHeartDisease:
      title: MedicalHeartDisease
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Heart disease indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalStroke:
      title: MedicalStroke
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Stroke indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHypertension:
      title: MedicalHypertension
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Blood pressure indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalCholesterolHigh:
      title: MedicalCholesterolHigh
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Cholesterol indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalDiabetes:
      title: MedicalDiabetes
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Diabetes indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalCancer:
      title: MedicalCancer
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Cancer indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MentalHealthDepression:
      title: MentalHealthDepression
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Depression indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalBoneDensityConditionOsteoporosis:
      title: MedicalBoneDensityConditionOsteoporosis
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Osteoporosis indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalAsthma:
      title: MedicalAsthma
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Asthma indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalChronicLungDisease:
      title: MedicalChronicLungDisease
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: LungDisease indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalArthritis:
      title: MedicalArthritis
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Arthritis indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHistoryAllergies:
      title: MedicalHistoryAllergies
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Allergies indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHistoryBackPain:
      title: MedicalHistoryBackPain
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Back pain indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHistoryChronicPain:
      title: MedicalHistoryChronicPain
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Pain indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHistoryHeartBurnReflux:
      title: MedicalHistoryHeartBurnReflux
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Heart burn indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalMigraine:
      title: MedicalMigraine
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Migraine indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalSleepDisorder:
      title: MedicalSleepDisorder
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Sleep indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalOtherConditionsDuplicate:
      title: MedicalOtherConditionsDuplicate
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Duplicate indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalHistoryThyroid:
      title: MedicalHistoryThyroid
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Thyroid indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalPregnant:
      title: MedicalPregnant
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Pregnancy indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyHeartDisease:
      title: MedicalFamilyHeartDisease
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family heart disease indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyStroke:
      title: MedicalFamilyStroke
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family stroke indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyHypertension:
      title: MedicalFamilyHypertension
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family blood pressure indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyCholesterol:
      title: MedicalFamilyCholesterol
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family cholesterol indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyDiabetes:
      title: MedicalFamilyDiabetes
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family diabetes indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyCancer:
      title: MedicalFamilyCancer
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family cancer indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyOsteoporosis:
      title: MedicalFamilyOsteoporosis
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family osteoporosis indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyAsthma:
      title: MedicalFamilyAsthma
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family asthma indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    MedicalFamilyChronicLungDisease:
      title: MedicalFamilyChronicLungDisease
      enum:
        - 'Yes'
        - 'No'
      type: string
      description: Family lungDisease indicator
      example: 'Yes'
      x-enum-elements:
        - name: 'Yes'
          description: ''
        - name: 'No'
          description: ''
    Workout:
      title: Workout
      type: object
      properties:
        workoutId:
          type: string
          description: The unique identification number of the workout.
        startDate:
          type: string
          description: Start date of the workout/activity.
        endDate:
          type: string
          description: Date on which the workout/activity is ending..
        workoutType:
          type: string
          description: 'Type of workout done e.g. Walking,Runnning,etc.'
        description:
          type: string
          description: Detailed description of the workout.
        integrity:
          type: string
          description: Provides information whether the activity is TRUSTED or UNTRUSTED.
        category:
          type: string
          description: .
        intensity:
          type: string
          description: 'The intensity of the workout completed by  member e.g. Hard,Easy.'
        measure:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
          description: ''
        uploadDetails:
          type: array
          items:
            $ref: '#/components/schemas/UploadDetail'
          description: ''
    Measure:
      title: Measure
      type: object
      properties:
        type:
          type: string
          description: Type of the workout done .
        value:
          type: string
          description: Actual value of the workout done e.g. 5 km walking.
        attributeBreakup:
          $ref: '#/components/schemas/AttributeBreakup'
    AttributeBreakup:
      title: AttributeBreakup
      type: object
      properties:
        key:
          type: string
          description: 'Attributes name such as pace,heartRate,etc.'
        value:
          type: string
          description: Value of the attribute.
        unit:
          type: string
          description: Unit of the value e.g. for heartbeats unit will be bpm.
    UploadDetail:
      title: UploadDetail
      type: object
      properties:
        uploadDate:
          type: string
          description: Date on which the data is uploaded from the device by member.
        system:
          type: string
          description: Device by which the data is uploaded in the system  .
        manufacturer:
          type: string
          description: Manufacturer of the device.
    Exception:
      title: Exception
      type: object
      properties:
        message:
          type: string
        reasonCode:
          type: string
        reason:
          type: string
    AssessmentType:
      title: assessment-type
      enum:
        - general
        - mental
        - fitness
        - nutrition
        - screenings
      type: string
      example: general
      x-enum-elements:
        - name: general
          description: ''
        - name: mental
          description: ''
        - name: fitness
          description: ''
        - name: nutrition
          description: ''
        - name: screenings
          description: ''
    Action:
      title: action
      enum:
        - Accept
        - Quit
      type: string
      example: Accept
      x-enum-elements:
        - name: Accept
          description: ''
        - name: Quit
          description: ''
    Action315:
      title: action315
      enum:
        - Achieved
        - Unachieved
      type: string
      example: Achieved
      x-enum-elements:
        - name: Achieved
          description: ''
        - name: Unachieved
          description: ''
    Action317:
      title: action317
      enum:
        - accept
        - reject
      type: string
      example: accept
      x-enum-elements:
        - name: accept
          description: ''
        - name: reject
          description: ''
    Action318:
      title: action318
      enum:
        - poke
        - clap
        - like
      type: string
      example: poke
      x-enum-elements:
        - name: poke
          description: ''
        - name: clap
          description: ''
        - name: like
          description: ''
    Status:
      title: status
      enum:
        - Bronze
        - Silver
        - Gold
        - Platinum
      type: string
      example: Bronze
      x-enum-elements:
        - name: Bronze
          description: ''
        - name: Silver
          description: ''
        - name: Gold
          description: ''
        - name: Platinum
          description: ''
    TaggedStatus:
      title: tagged-status
      enum:
        - used
        - unused
      type: string
      example: used
      x-enum-elements:
        - name: used
          description: ''
        - name: unused
          description: ''
tags:
  - name: Assessments
    description: ''
  - name: Challenges
    description: ''
  - name: Devices
    description: ''
  - name: Fitness Events
    description: ''
  - name: Friends
    description: ''
  - name: Memberships
    description: ''
  - name: Notifications
    description: ''
  - name: Partners
    description: ''
  - name: Points
    description: ''
  - name: Rewards
    description: ''
